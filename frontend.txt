### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\App.css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  background-color: #1F2937;
  color: #fff;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
}

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 1rem;
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.button-loading::after {
  content: '';
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border: 2px solid white;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
  margin-left: 0.5rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './core-ui/App'
import './index.css'

// Добавьте консоль для отладки
console.log('Инициализация приложения...');

const rootElement = document.getElementById('root');
if (rootElement) {
  try {
    ReactDOM.createRoot(rootElement).render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
    );
    console.log('Приложение отрендерено успешно');
  } catch (error) {
    console.error('Ошибка при рендеринге:', error);
  }
} else {
  console.error('Элемент #root не найден!');
}

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\vite-env.d.ts
/// <reference types="vite/client" />


================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\api-client\ordersAdapter.ts
// my-front/src/api-client/ordersAdapter.ts

// Интерфейсы для более точной типизации
export interface Operation {
  opNumber: number;
  opTime: number;
  opAxes: string;
  assignedMachine?: string;
  startDate?: string;
  endDate?: string;
}

export interface Order {
  id: number;
  machineName?: string;
  blueprintNumber: string;
  startDate?: string;
  deadline: string;
  quantity: number;
  willMeetDeadline: boolean;
  completedQuantity?: number;
  remainingQuantity: number;
  priority: number;
  status: string;
  operations?: Operation[];
  pdfPath?: string;
  drawingUrl?: string;
  previewUrl?: string;
  estimatedCompletion?: string;
  estimatedWorkdays?: number;
  timeMargin?: number;
  materialType?: string;
}

// Адаптация данных с API (snake_case) для фронтенда (camelCase)
export const adaptOrderFromApi = (orderData: any): Order => {
  if (!orderData) return null as any;

  // Создаем базовую структуру заказа
  const order: Order = {
    id: orderData.id,
    machineName: orderData.machine_name,
    blueprintNumber: orderData.blueprint_number || '',
    startDate: orderData.start_date,
    deadline: orderData.deadline || new Date().toISOString(),
    quantity: orderData.quantity || 0,
    willMeetDeadline: orderData.will_meet_deadline !== undefined ? 
                      orderData.will_meet_deadline : true,
    completedQuantity: orderData.completed_quantity || 0,
    remainingQuantity: orderData.remaining_quantity || orderData.quantity || 0,
    priority: orderData.priority || 1,
    status: orderData.status || 'новый',
    pdfPath: orderData.pdf_path,
    drawingUrl: orderData.drawing_url,
    previewUrl: orderData.preview_url,
    estimatedCompletion: orderData.estimated_completion,
    estimatedWorkdays: orderData.estimated_workdays,
    timeMargin: orderData.time_margin,
    materialType: orderData.material_type
  };

  // Обрабатываем операции, если они есть
  if (orderData.operations && Array.isArray(orderData.operations)) {
    order.operations = orderData.operations.map((op: any) => ({
      opNumber: op.op_number,
      opTime: op.op_time,
      opAxes: op.op_axes,
      assignedMachine: op.assigned_machine,
      startDate: op.start_date,
      endDate: op.end_date
    }));
  } else {
    order.operations = [];
  }

  return order;
};

// Адаптация данных с фронтенда (camelCase) для API (snake_case)
export const adaptOrderForApi = (orderData: any): any => {
  const adaptedOrder: any = {
    id: orderData.id,
    machine_name: orderData.machineName,
    blueprint_number: orderData.blueprintNumber,
    start_date: orderData.startDate,
    deadline: orderData.deadline,
    quantity: Number(orderData.quantity),
    will_meet_deadline: orderData.willMeetDeadline,
    completed_quantity: orderData.completedQuantity || 0,
    remaining_quantity: orderData.remainingQuantity || orderData.quantity,
    priority: orderData.priority || 0,
    status: orderData.status || 'новый',
    pdf_path: orderData.pdfPath,
    drawing_url: orderData.drawingUrl,
    preview_url: orderData.previewUrl,
    estimated_completion: orderData.estimatedCompletion,
    estimated_workdays: orderData.estimatedWorkdays,
    time_margin: orderData.timeMargin,
    material_type: orderData.materialType
  };

  // Обрабатываем операции для API
  if (orderData.operations && Array.isArray(orderData.operations)) {
    adaptedOrder.operations = orderData.operations.map((op: any) => ({
      op_number: op.opNumber,
      op_time: op.opTime,
      op_axes: op.opAxes,
      assigned_machine: op.assignedMachine,
      start_date: op.startDate,
      end_date: op.endDate
    }));
  }

  return adaptedOrder;
};

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\api-client\ordersApi.ts
// my-front/src/api-client/ordersApi.ts
import axios from 'axios';
import { adaptOrderFromApi, adaptOrderForApi, Order } from './ordersAdapter';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

// Моковые данные для станков
let mockMachines = [
  { id: 1, name: 'Doosan Hadasha', releaseDate: '2025-03-22', types: ['3х', '4х'] },
  { id: 2, name: 'Doosan Yashana', releaseDate: '2025-03-23', types: ['3х', '4х'] },
  { id: 3, name: 'Pinnacle Gdola', releaseDate: '2025-03-25', types: ['3х', '4х'] },
  { id: 4, name: 'Pinnacle Ktana', releaseDate: '2025-03-26', types: ['3х'] },
  { id: 5, name: 'Mitsubishi', releaseDate: '2025-03-27', types: ['3х'] },
  { id: 6, name: 'Okuma', releaseDate: '2025-03-28', types: ['токарный'] },
  { id: 7, name: 'JohnFord', releaseDate: '2025-03-29', types: ['токарный'] },
];

/**
 * Обработка ошибок API запросов
 */
export const handleError = (message: string, error: unknown): void => {
  console.error(message, error);
};

/**
 * Получение списка заказов
 */
export const fetchOrders = async (): Promise<Order[]> => {
  try {
    if (import.meta.env.VITE_USE_MOCK === 'true') {
      return []; // Возвращаем пустой массив, т.к. нет моковых данных заказов
    }
    
    console.log('Отправка запроса к API на получение заказов');
    const response = await axios.get(`${API_URL}/orders`);
    console.log('API ответ:', response.data);
    
    // Применяем адаптер для преобразования формата данных
    const adaptedOrders = response.data.map((order: any) => adaptOrderFromApi(order));
    console.log('Адаптированные данные заказов:', adaptedOrders);
    
    return adaptedOrders;
  } catch (error) {
    handleError('Ошибка при загрузке заказов:', error);
    console.log('Возвращаем пустой массив из-за ошибки API');
    return [];
  }
};

/**
 * Получение конкретного заказа по ID
 */
export const getOrderById = async (id: number): Promise<Order | null> => {
  try {
    if (import.meta.env.VITE_USE_MOCK === 'true') {
      return null;
    }
    
    const response = await axios.get(`${API_URL}/orders/${id}`);
    console.log(`Получен заказ #${id}:`, response.data);
    
    // Применяем адаптер для преобразования формата данных
    return adaptOrderFromApi(response.data);
  } catch (error) {
    handleError(`Ошибка при получении заказа #${id}:`, error);
    return null;
  }
};

/**
 * Создание нового заказа
 */
export const createOrder = async (orderData: any) => {
  try {
    const adaptedOrder = adaptOrderForApi(orderData);
    console.log('Создание заказа с данными:', adaptedOrder);
    
    if (import.meta.env.VITE_USE_MOCK === 'true') {
      return adaptedOrder;
    }
    
    const response = await axios.post(`${API_URL}/orders`, adaptedOrder);
    return adaptOrderFromApi(response.data);
  } catch (error) {
    handleError('Ошибка при создании заказа:', error);
    throw error;
  }
};

/**
 * Обновление существующего заказа
 */
export const updateOrder = async (orderData: any) => {
  try {
    const adaptedOrder = adaptOrderForApi(orderData);
    console.log(`Обновление заказа #${adaptedOrder.id}:`, adaptedOrder);
    
    if (import.meta.env.VITE_USE_MOCK === 'true') {
      return adaptedOrder;
    }
    
    const response = await axios.patch(`${API_URL}/orders/${adaptedOrder.id}`, adaptedOrder);
    return adaptOrderFromApi(response.data);
  } catch (error) {
    handleError('Ошибка при обновлении заказа:', error);
    throw error;
  }
};

/**
 * Удаление заказа
 */
export const deleteOrder = async (id: number) => {
  try {
    console.log(`Удаление заказа #${id}`);
    
    if (import.meta.env.VITE_USE_MOCK === 'true') {
      return;
    }
    
    await axios.delete(`${API_URL}/orders/${id}`);
  } catch (error) {
    handleError('Ошибка при удалении заказа:', error);
    throw error;
  }
};

/**
 * Получение списка станков - всегда используем моковые данные
 */
export const fetchMachines = async () => {
  console.log('Машины всегда используют моковые данные');
  return mockMachines;
};

/**
 * Обновление даты освобождения станка
 */
export const updateMachineReleaseDate = async (machineId: number, releaseDate: string) => {
  try {
    console.log(`Обновление даты освобождения станка #${machineId} на ${releaseDate}`);
    
    mockMachines = mockMachines.map(m => 
      m.id === machineId ? { ...m, releaseDate } : m
    );
    
    return mockMachines.find(m => m.id === machineId);
  } catch (error) {
    handleError('Ошибка при обновлении даты станка:', error);
    throw error;
  }
};

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\core-ui\App.tsx
import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import './styles/index.css';
import '../core-ui/styles/index.css'; // Проверьте правильность пути

// Используем динамический импорт с корректными путями
const OrdersPage = lazy(() => import('../order-management/components/OrdersPage'));
const CalculationPage = lazy(() => import('../schedule-calculator/components/CalculationPage'));
const MachineScheduleCalendar = lazy(() => import('../machine-scheduler/components/MachineScheduleCalendar'));
const HomePage = lazy(() => import('./components/HomePage'));

const App: React.FC = () => (
  <div className="app-container">
    <Router>
      <Navbar />
      <div className="content-wrapper">
        <Suspense fallback={<div className="loader">Загрузка...</div>}>
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/orders" element={<OrdersPage />} />
            <Route path="/calculation" element={<CalculationPage />} />
            <Route path="/calendar" element={<MachineScheduleCalendar />} />
            <Route path="/about" element={<div className="p-6 text-white">О системе</div>} />
          </Routes>
        </Suspense>
      </div>
    </Router>
  </div>
);

export default App;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\core-ui\components\HomePage.tsx
import React from 'react';
import { Link } from 'react-router-dom';

const HomePage: React.FC = () => {
  // Карточки с функциями системы
  const features = [
    {
      title: 'Управление заказами',
      description: 'Создавайте, редактируйте и отслеживайте статусы всех заказов в единой системе',
      icon: '📋',
      link: '/orders'
    },
    {
      title: 'Планирование расписания',
      description: 'Автоматический расчет оптимального расписания работы станков',
      icon: '⏱️',
      link: '/calculation'
    },
    {
      title: 'Календарь станков',
      description: 'Визуализация загрузки станков и планирование производства',
      icon: '📅',
      link: '/calendar'
    }
  ];

  return (
    <div className="py-8">
      {/* Заголовок */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-white mb-4">Система управления производством</h1>
        <p className="text-xl text-gray-300 max-w-3xl mx-auto">
          Интеллектуальное планирование и эффективное управление заказами для вашего предприятия
        </p>
      </div>

      {/* Карточки с функциями */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto mb-12">
        {features.map((feature, index) => (
          <Link 
            to={feature.link} 
            key={index}
            className="bg-gray-800 rounded-lg p-6 shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1 hover:bg-gray-700"
          >
            <div className="text-4xl mb-4">{feature.icon}</div>
            <h2 className="text-xl font-semibold text-white mb-2">{feature.title}</h2>
            <p className="text-gray-300">{feature.description}</p>
          </Link>
        ))}
      </div>

      {/* Статистика */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg p-8 max-w-6xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
          <div>
            <div className="text-4xl font-bold text-white">15+</div>
            <div className="text-gray-200">Активных заказов</div>
          </div>
          <div>
            <div className="text-4xl font-bold text-white">98%</div>
            <div className="text-gray-200">Своевременное выполнение</div>
          </div>
          <div>
            <div className="text-4xl font-bold text-white">5</div>
            <div className="text-gray-200">Станков на производстве</div>
          </div>
        </div>
      </div>
      
      {/* Дополнительная информация */}
      <div className="text-center mt-12">
        <h2 className="text-2xl font-bold text-white mb-4">Начните работу с системой</h2>
        <p className="text-gray-300 mb-6">
          Переходите к любому разделу системы через меню навигации или карточки выше
        </p>
        <Link 
          to="/orders" 
          className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
        >
          Перейти к заказам
        </Link>
      </div>
    </div>
  );
};

export default HomePage;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\core-ui\components\Navbar.tsx
import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';

const Navbar: React.FC = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  return (
    <nav className="bg-gray-800 shadow-lg">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <span className="text-white text-xl font-bold">Геносис</span>
            </div>
            <div className="hidden md:block">
              <div className="ml-10 flex items-baseline space-x-4">
                <NavLink 
                  to="/" 
                  className={({ isActive }) => 
                    isActive 
                      ? "bg-indigo-600 text-white px-3 py-2 rounded-md text-sm font-medium" 
                      : "text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                  }
                >
                  Главная
                </NavLink>
                <NavLink 
                  to="/orders" 
                  className={({ isActive }) => 
                    isActive 
                      ? "bg-indigo-600 text-white px-3 py-2 rounded-md text-sm font-medium" 
                      : "text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                  }
                >
                  Заказы
                </NavLink>
                <NavLink 
                  to="/calculation" 
                  className={({ isActive }) => 
                    isActive 
                      ? "bg-indigo-600 text-white px-3 py-2 rounded-md text-sm font-medium" 
                      : "text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                  }
                >
                  Расчет
                </NavLink>
                <NavLink 
                  to="/calendar" 
                  className={({ isActive }) => 
                    isActive 
                      ? "bg-indigo-600 text-white px-3 py-2 rounded-md text-sm font-medium" 
                      : "text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                  }
                >
                  Календарь
                </NavLink>
                <NavLink 
                  to="/about" 
                  className={({ isActive }) => 
                    isActive 
                      ? "bg-indigo-600 text-white px-3 py-2 rounded-md text-sm font-medium" 
                      : "text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium"
                  }
                >
                  О системе
                </NavLink>
              </div>
            </div>
          </div>
          <div className="-mr-2 flex md:hidden">
            <button
              onClick={toggleMenu}
              type="button"
              className="bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none"
              aria-controls="mobile-menu"
              aria-expanded="false"
            >
              <span className="sr-only">Открыть главное меню</span>
              {/* Иконка меню */}
              {!isMenuOpen ? (
                <svg className="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              ) : (
                <svg className="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              )}
            </button>
          </div>
        </div>
      </div>
      {/* Мобильное меню */}
      <div className={`${isMenuOpen ? 'block' : 'hidden'} md:hidden`} id="mobile-menu">
        <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
          <NavLink 
            to="/" 
            className={({ isActive }) => 
              isActive 
                ? "bg-indigo-600 text-white block px-3 py-2 rounded-md text-base font-medium" 
                : "text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
            }
            onClick={() => setIsMenuOpen(false)}
          >
            Главная
          </NavLink>
          <NavLink 
            to="/orders" 
            className={({ isActive }) => 
              isActive 
                ? "bg-indigo-600 text-white block px-3 py-2 rounded-md text-base font-medium" 
                : "text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
            }
            onClick={() => setIsMenuOpen(false)}
          >
            Заказы
          </NavLink>
          <NavLink 
            to="/calculation" 
            className={({ isActive }) => 
              isActive 
                ? "bg-indigo-600 text-white block px-3 py-2 rounded-md text-base font-medium" 
                : "text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
            }
            onClick={() => setIsMenuOpen(false)}
          >
            Расчет
          </NavLink>
          <NavLink 
            to="/calendar" 
            className={({ isActive }) => 
              isActive 
                ? "bg-indigo-600 text-white block px-3 py-2 rounded-md text-base font-medium" 
                : "text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
            }
            onClick={() => setIsMenuOpen(false)}
          >
            Календарь
          </NavLink>
          <NavLink 
            to="/about" 
            className={({ isActive }) => 
              isActive 
                ? "bg-indigo-600 text-white block px-3 py-2 rounded-md text-base font-medium" 
                : "text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium"
            }
            onClick={() => setIsMenuOpen(false)}
          >
            О системе
          </NavLink>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\core-ui\styles\App.css
/* core-ui/src/styles/App.css */
.app-container {
  min-height: 100vh;
  background: linear-gradient(135deg, #1f2937, #111827);
  color: #ffffff;
}

.content-wrapper {
  max-width: 1280px;
  margin: 0 auto;
  padding: 1.5rem;
}

.loader {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 50vh;
  color: #ffffff;
  font-size: 1.5rem;
}

.loader::after {
  content: '';
  width: 1.5rem;
  height: 1.5rem;
  margin-left: 0.5rem;
  border: 3px solid #6366F1;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.card {
  background-color: #1F2937;
  border-radius: 0.5rem;
  padding: 1.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin-bottom: 1rem;
  transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
}

.page-title {
  font-size: 1.875rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #ffffff;
  border-bottom: 2px solid #4F46E5;
  padding-bottom: 0.5rem;
  display: inline-block;
}

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\core-ui\styles\globals.css
/* core-ui/src/styles/globals.css */

html, body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  background-color: #1F2937;
  color: #fff;
}

* {
  box-sizing: border-box;
} 


================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\core-ui\styles\index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #1F2937;
  color: #fff;
} 


================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\dir app\index.ts
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from '../../../frontend_new2/App';

console.log('Starting React app...');
const container = document.getElementById('root');
if (!container) {
  console.error('Container #root not found!');
} else {
  console.log('Container found, rendering...');
  const root = createRoot(container);
  root.render(
    React.createElement(App)
  );
  console.log('Render complete');
}

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\document-viewer\components\PdfViewer.tsx
import React from 'react';
import { Button } from '../../ui-components/components/Button';

interface PdfViewerProps {
  url: string;
}

const PdfViewer: React.FC<PdfViewerProps> = ({ url }) => (
  <div className="p-6 bg-gray-900 min-h-screen">
    <h1 className="text-2xl font-bold text-white mb-6">Просмотр PDF</h1>
    <Button variant="primary" onClick={() => window.open(url, '_blank')}>
      Открыть PDF
    </Button>
  </div>
);

export default PdfViewer;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\machine-scheduler\components\MachineOrdersList.tsx
 
import React from 'react';
import { Button } from '../../ui-components/components/Button';



interface MachineOrdersListProps {
  machineId: number;
  orders: any[];
  onRemoveOrder: (orderId: number) => void;
}

const MachineOrdersList: React.FC<MachineOrdersListProps> = ({ machineId, orders, onRemoveOrder }) => {
  const machineOrders = orders.filter(order =>
    order.operations.some((op: any) => op.machineId === machineId)
  );
  // const isWeekend = (date: Date): boolean => {
  //   const day = date.getDay();
  //   return day === 0 || day === 6; // 0 - воскресенье, 6 - суббота
  // };

  return (
    <div className="bg-gray-800 rounded-xl p-4">
      <h2 className="text-lg font-semibold text-white mb-4">Заказы на станке</h2>
      {machineOrders.length === 0 ? (
        <p className="text-gray-400">Нет заказов</p>
      ) : (
        <ul className="space-y-2">
          {machineOrders.map(order => (
            <li key={order.id} className="flex justify-between items-center bg-gray-700 p-2 rounded">
              <span className="text-white">{order.blueprintNumber}</span>
              <Button variant="danger" size="sm" onClick={() => onRemoveOrder(order.id)}>
                Удалить
              </Button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default MachineOrdersList;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\machine-scheduler\components\MachineScheduleCalendar.tsx
// src/machine-scheduler/components/MachineScheduleCalendar.tsx
import React, { useState, useEffect } from 'react';
import { fetchOrders, fetchMachines } from '../../api-client/ordersApi';
import { 
  addDays, 
  format, 
  eachDayOfInterval, 
  getDay, 
  differenceInDays, 
  isWithinInterval,
  isSameDay
} from 'date-fns';
import { ru } from 'date-fns/locale';
import { 
  isWeekendIsrael, 
  getHolidayStatusIsrael, 
  getAvailableHoursInDay
} from '../../utils/utils';

interface CalendarItem {
  date: Date;
  isWeekend: boolean;
  isHoliday: boolean;
  isHalfDay: boolean;
  operations: OrderOperation[];
}

interface MachineSchedule {
  machineId: number;
  machineName: string;
  calendar: CalendarItem[];
}

interface OrderOperation {
  orderId: number;
  orderNumber: string;
  operationNumber: number;
  quantity: number;
  startDate: Date;
  endDate: Date;
  machineName: string;
  machineId: number;
  deadline: string;
  opTime: number;
  opAxes: string;
}

const MachineScheduleCalendar: React.FC = () => {
  const [machines, setMachines] = useState<any[]>([]);
  const [operationSchedules, setOperationSchedules] = useState<OrderOperation[]>([]);
  const [machineSchedules, setMachineSchedules] = useState<MachineSchedule[]>([]);
  const [selectedMachine, setSelectedMachine] = useState<string | null>(null);
  const [startDate, setStartDate] = useState<Date>(new Date());
  const [endDate, setEndDate] = useState<Date>(addDays(new Date(), 30)); // По умолчанию 1 месяц
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<'calendar' | 'gantt'>('calendar');

  // Загрузка данных
  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      try {
        // Загружаем станки и заказы
        const [machinesData, ordersData] = await Promise.all([
          fetchMachines(),
          fetchOrders()
        ]);

        console.log('Загружено станков:', machinesData.length);
        console.log('Загружено заказов:', ordersData.length);

        setMachines(machinesData);
        
        if (machinesData.length > 0 && !selectedMachine) {
          setSelectedMachine(machinesData[0].name);
        }

        // Преобразуем операции из заказов в формат для календаря
        const allOperations: OrderOperation[] = [];
        
        ordersData.forEach((order: any) => {
          if (order.operations && order.operations.length > 0) {
            order.operations.forEach((op: any) => {
              if (op.assignedMachine && op.startDate && op.endDate) {
                const machineObj = machinesData.find((m: any) => m.name === op.assignedMachine);
                
                allOperations.push({
                  orderId: order.id,
                  orderNumber: order.blueprintNumber,
                  operationNumber: op.opNumber,
                  quantity: order.quantity,
                  startDate: new Date(op.startDate),
                  endDate: new Date(op.endDate),
                  machineName: op.assignedMachine,
                  machineId: machineObj ? machineObj.id : 0,
                  deadline: order.deadline,
                  opTime: op.opTime,
                  opAxes: op.opAxes
                });
              }
            });
          }
        });

        console.log('Создано операций для календаря:', allOperations.length);
        setOperationSchedules(allOperations);
        setError(null);
      } catch (err) {
        console.error('Ошибка при загрузке данных:', err);
        setError('Не удалось загрузить данные календаря');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [selectedMachine]);

  // Создание календарей для каждого станка
  useEffect(() => {
    if (machines.length === 0) return;

    // Формируем календарь для каждого станка
    const schedules: MachineSchedule[] = machines.map(machine => {
      // Получаем все дни в заданном диапазоне дат
      const days = eachDayOfInterval({ start: startDate, end: endDate });
      
      // Создаем объекты дней календаря
      const calendar: CalendarItem[] = days.map(day => {
        // Определяем, является ли день выходным или праздником в Израиле
        const isWeekendDay = isWeekendIsrael(day);
        const holidayStatus = getHolidayStatusIsrael(day);
        const isHolidayDay = !!holidayStatus && holidayStatus.isFullDay === true;
        const isHalfDayWork = !!holidayStatus && holidayStatus.isHalfDay === true;
        
        // Находим операции, выполняемые на этом станке в этот день
        const dayOperations = operationSchedules.filter(op => {
          const isRelevantMachine = op.machineName === machine.name;
          
          // Проверка, что день попадает в диапазон выполнения операции
          const isWithinDateRange = isWithinInterval(day, {
            start: op.startDate,
            end: op.endDate
          });
          
          return isRelevantMachine && isWithinDateRange;
        });
        
        return {
          date: day,
          isWeekend: isWeekendDay,
          isHoliday: isHolidayDay,
          isHalfDay: isHalfDayWork,
          operations: dayOperations
        };
      });
      
      return {
        machineId: machine.id,
        machineName: machine.name,
        calendar
      };
    });
    
    setMachineSchedules(schedules);
    
  }, [machines, operationSchedules, startDate, endDate]);

  // Обработчик изменения начальной даты
  const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newDate = new Date(e.target.value);
    setStartDate(newDate);
    
    // Если конечная дата раньше начальной плюс 7 дней, корректируем её
    if (endDate <= addDays(newDate, 7)) {
      setEndDate(addDays(newDate, 30));
    }
  };

  // Обработчик изменения конечной даты
  const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newDate = new Date(e.target.value);
    setEndDate(newDate);
  };

  // Переключение между видами отображения
  const toggleViewMode = () => {
    setViewMode(viewMode === 'calendar' ? 'gantt' : 'calendar');
  };

  // Отрисовка календаря для выбранного станка
  const renderSelectedMachineCalendar = () => {
    if (!selectedMachine) return null;
    
    const machineSchedule = machineSchedules.find(s => s.machineName === selectedMachine);
    if (!machineSchedule) return null;
    
    const months: { [key: string]: CalendarItem[] } = {};
    
    // Группируем дни по месяцам
    machineSchedule.calendar.forEach(item => {
      const monthKey = format(item.date, 'yyyy-MM');
      if (!months[monthKey]) {
        months[monthKey] = [];
      }
      months[monthKey].push(item);
    });
    
    return (
      <div className="space-y-8">
        {Object.keys(months).map(monthKey => {
          const monthName = format(new Date(months[monthKey][0].date), 'LLLL yyyy', { locale: ru });
          
          return (
            <div key={monthKey} className="bg-gray-800 rounded-xl p-4">
              <h3 className="text-xl font-semibold capitalize mb-4">{monthName}</h3>
              <div className="grid grid-cols-7 gap-1">
                {/* Дни недели */}
                {['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'].map(day => (
                  <div key={day} className="text-center font-medium py-2 border-b border-gray-700">
                    {day}
                  </div>
                ))}
                
                {/* Заполнители для выравнивания календаря */}
                {Array.from({ length: getDay(months[monthKey][0].date) }).map((_, i) => (
                  <div key={`empty-start-${i}`} className="h-36"></div>
                ))}
                
                {/* Дни месяца */}
                {months[monthKey].map(day => {
                  const dayOfMonth = format(day.date, 'd');
                  const availableHours = getAvailableHoursInDay(day.date);
                  
                  return (
                    <div
                      key={format(day.date, 'yyyy-MM-dd')}
                      className={`
                        h-36 border border-gray-700 p-1 relative overflow-hidden
                        ${day.isWeekend ? 'bg-gray-900 opacity-60' : ''}
                        ${day.isHoliday ? 'bg-purple-900 opacity-60' : ''}
                        ${day.isHalfDay ? 'bg-purple-800 opacity-40' : ''}
                      `}
                    >
                      <div className="text-sm font-semibold mb-1">
                        {dayOfMonth}
                        {day.isWeekend && <span className="ml-1 text-yellow-400">(вых)</span>}
                        {day.isHoliday && <span className="ml-1 text-purple-400">(праздник)</span>}
                        {day.isHalfDay && <span className="ml-1 text-purple-300">(до 13:00)</span>}
                        {!day.isWeekend && !day.isHoliday && 
                          <span className="ml-1 text-green-400">({availableHours}ч)</span>
                        }
                      </div>
                      <div className="overflow-y-auto h-28 text-xs">
                        {day.operations.map((op, idx) => {
                          // Форматирование даты дедлайна
                          const deadlineDate = new Date(op.deadline);
                          
                          // Проверка состояния дедлайна
                          const isDeadlineClose = differenceInDays(deadlineDate, day.date) <= 7 && differenceInDays(deadlineDate, day.date) >= 0;
                          const isOverdue = day.date > deadlineDate;
                          
                          // Выделяем первый день операции специальным стилем
                          const isFirstDay = isSameDay(day.date, op.startDate);
                          const isLastDay = isSameDay(day.date, op.endDate);
                          
                          return (
                            <div 
                              key={`${op.orderId}-${op.operationNumber}-${idx}`}
                              className={`p-1 mb-1 rounded text-white cursor-pointer ${
                                isOverdue ? 'bg-red-800' : 
                                isDeadlineClose ? 'bg-yellow-800' : 
                                'bg-indigo-900'
                              } ${isFirstDay ? 'border-l-4 border-green-500' : ''} 
                                 ${isLastDay ? 'border-r-4 border-blue-500' : ''}`}
                            >
                              <div className="font-semibold truncate">{op.orderNumber}</div>
                              <div>ID: {op.orderId}</div>
                              <div className="flex justify-between">
                                <span>Оп. #{op.operationNumber}</span>
                                <span>Кол-во: {op.quantity}</span>
                              </div>
                              <div className="text-xs">
                                Срок: {format(deadlineDate, 'dd.MM.yyyy')}
                              </div>
                              {isFirstDay && (
                                <div className="text-xs mt-1 text-green-300">
                                  Начало: {format(op.startDate, 'dd.MM HH:mm')}
                                </div>
                              )}
                              {isLastDay && (
                                <div className="text-xs mt-1 text-blue-300">
                                  Завершение: {format(op.endDate, 'dd.MM HH:mm')}
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  // Отрисовка диаграммы Ганта для всех станков
  const renderGanttChart = () => {
    if (operationSchedules.length === 0) return (
      <div className="text-center py-10 bg-gray-800 rounded-xl">
        <p>Нет данных для отображения. Сначала распределите операции заказов по станкам.</p>
      </div>
    );
    
    // Группируем операции по станкам
    const operationsByMachine: { [key: string]: OrderOperation[] } = {};
    
    operationSchedules.forEach(op => {
      if (!operationsByMachine[op.machineName]) {
        operationsByMachine[op.machineName] = [];
      }
      operationsByMachine[op.machineName].push(op);
    });
    
    return (
      <div className="bg-gray-800 rounded-xl p-4">
        <h3 className="text-xl font-semibold mb-4">Диаграмма загрузки станков</h3>
        
        <div className="overflow-x-auto">
          <div className="min-w-max"> {/* Обеспечивает горизонтальную прокрутку */}
            {/* Шкала времени */}
            <div className="flex border-b border-gray-700 mb-2">
              <div className="w-40 shrink-0"></div> {/* Место для названий станков */}
              {eachDayOfInterval({ start: startDate, end: endDate }).map(date => {
                const isWeekendDay = isWeekendIsrael(date);
                const holidayStatus = getHolidayStatusIsrael(date);
                const isHolidayDay = !!holidayStatus && holidayStatus.isFullDay === true;
                const isHalfDayWork = !!holidayStatus && holidayStatus.isHalfDay === true;
                
                return (
                  <div 
                    key={format(date, 'yyyy-MM-dd')}
                    className={`w-8 text-center text-xs py-1 ${
                      isHolidayDay ? 'bg-purple-800' : 
                      isHalfDayWork ? 'bg-purple-700' :
                      isWeekendDay ? 'bg-gray-700' : ''
                    }`}
                  >
                    {format(date, 'd')}
                  </div>
                );
              })}
            </div>
            
            {/* Месяцы над шкалой времени */}
            <div className="flex border-b border-gray-700 mb-4 mt-[-40px]">
              <div className="w-40 shrink-0"></div>
              {Object.entries(
                eachDayOfInterval({ start: startDate, end: endDate }).reduce((acc: {[key: string]: number}, date) => {
                  const month = format(date, 'yyyy-MM');
                  if (!acc[month]) acc[month] = 0;
                  acc[month]++;
                  return acc;
                }, {})
              ).map(([month, days]) => {
                const monthDate = new Date(month);
                return (
                  <div 
                    key={month}
                    className="flex-shrink-0 h-8 text-center text-xs py-1 border-r border-gray-700"
                    style={{ width: `${days * 8}px` }}
                  >
                    {format(monthDate, 'LLLL', { locale: ru })}
                  </div>
                );
              })}
            </div>
            
            {/* Ряды для каждого станка */}
            {Object.entries(operationsByMachine).map(([machineName, operations]) => (
              <div key={machineName} className="flex mb-3 relative">
                <div className="w-40 shrink-0 p-2 font-medium">
                  {machineName}
                </div>
                
                <div className="flex-grow relative h-10 bg-gray-900">
                  {/* Отмечаем выходные дни и праздники */}
                  {eachDayOfInterval({ start: startDate, end: endDate }).map(date => {
                    const isWeekendDay = isWeekendIsrael(date);
                    const holidayStatus = getHolidayStatusIsrael(date);
                    const isHolidayDay = !!holidayStatus && holidayStatus.isFullDay === true;
                    const isHalfDayWork = !!holidayStatus && holidayStatus.isHalfDay === true;
                    
                    if (!isWeekendDay && !isHolidayDay && !isHalfDayWork) return null;
                    
                    const dayIndex = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
                    
                    return (
                      <div 
                        key={format(date, 'yyyy-MM-dd')}
                        className={`absolute h-full ${
                          isHolidayDay ? 'bg-purple-800 opacity-50' : 
                          isHalfDayWork ? 'bg-purple-700 opacity-30' :
                          'bg-gray-800 opacity-50'
                        }`}
                        style={{ 
                          left: `${dayIndex * 8}px`, 
                          width: '8px' 
                        }}
                      ></div>
                    );
                  })}
                  
                  {/* Отображаем операции */}
                  {operations.map(op => {
                    const startDayIndex = Math.max(0, Math.floor((op.startDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)));
                    const endDayIndex = Math.floor((op.endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
                    const durationDays = Math.max(1, endDayIndex - startDayIndex + 1);
                    
                    if (startDayIndex < 0 && endDayIndex < 0) return null; // Пропускаем операции, которые закончились до диапазона
                    
                    // Проверяем дедлайн для определения цвета
                    const deadlineDate = new Date(op.deadline);
                    const isOverdue = op.endDate > deadlineDate;
                    const isCloseToDeadline = differenceInDays(deadlineDate, op.endDate) <= 7 && !isOverdue;
                    
                    return (
                      <div 
                        key={`${op.orderId}-${op.operationNumber}`}
                        className={`absolute h-8 rounded text-xs flex items-center justify-center overflow-hidden cursor-pointer ${
                          isOverdue ? 'bg-red-700' : 
                          isCloseToDeadline ? 'bg-yellow-700' : 
                          'bg-indigo-700'
                        }`}
                        style={{ 
                          left: `${startDayIndex * 8}px`, 
                          width: `${durationDays * 8}px`,
                          top: '4px'
                        }}
                        title={`ID: ${op.orderId}, Чертеж: ${op.orderNumber}, Операция #${op.operationNumber}, Кол-во: ${op.quantity}, Срок: ${format(deadlineDate, 'dd.MM.yyyy')}`}
                      >
                        <span className="truncate px-1">{op.orderNumber} #{op.operationNumber}</span>
                      </div>
                    );
                  })}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="p-6 bg-gray-900 min-h-screen">
      <h1 className="text-2xl font-bold text-white mb-6">Календарь станков (Израиль)</h1>
      
      {loading ? (
        <div className="text-center py-10">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-600"></div>
          <p className="mt-2">Загрузка данных...</p>
        </div>
      ) : error ? (
        <div className="bg-red-800 p-4 rounded-xl mb-6">
          <p>{error}</p>
          <button 
            className="mt-2 px-4 py-2 bg-white text-red-800 rounded hover:bg-gray-200"
            onClick={() => window.location.reload()}
          >
            Попробовать снова
          </button>
        </div>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div>
              <label className="block text-sm mb-2">Станок:</label>
              <select
                value={selectedMachine || ''}
                onChange={(e) => setSelectedMachine(e.target.value)}
                className="w-full p-3 rounded bg-gray-700 text-white"
              >
                {machines.map(machine => (
                  <option key={machine.id} value={machine.name}>
                    {machine.name}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm mb-2">Начальная дата:</label>
              <input
                type="date"
                value={format(startDate, 'yyyy-MM-dd')}
                onChange={handleStartDateChange}
                className="w-full p-3 rounded bg-gray-700 text-white"
              />
            </div>
            <div>
              <label className="block text-sm mb-2">Конечная дата:</label>
              <input
                type="date"
                value={format(endDate, 'yyyy-MM-dd')}
                onChange={handleEndDateChange}
                className="w-full p-3 rounded bg-gray-700 text-white"
              />
            </div>
          </div>

          <div className="bg-gray-800 rounded-xl p-4 mb-8">
            <div className="flex flex-wrap justify-between items-center">
              <div className="flex flex-wrap gap-4 mb-4 md:mb-0">
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-gray-900 opacity-60 mr-2"></div>
                  <span>Выходные (Пт, Сб)</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-purple-900 opacity-60 mr-2"></div>
                  <span>Праздники Израиля</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-purple-800 opacity-40 mr-2"></div>
                  <span>Полдня (до 13:00)</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-indigo-700 mr-2"></div>
                  <span>В сроке</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-yellow-700 mr-2"></div>
                  <span>Близко к сроку</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-red-700 mr-2"></div>
                  <span>Просрочено</span>
                </div>
              </div>
              
              <button
                className="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition"
                onClick={toggleViewMode}
              >
                {viewMode === 'calendar' ? 'Показать диаграмму' : 'Показать календарь'}
              </button>
            </div>
          </div>

          {viewMode === 'gantt' ? (
            <div className="mb-10">
              <h2 className="text-2xl font-semibold mb-4">Диаграмма Ганта</h2>
              {renderGanttChart()}
            </div>
          ) : (
            <div>
              <h2 className="text-2xl font-semibold mb-4">Календарь по месяцам для {selectedMachine}</h2>
              {renderSelectedMachineCalendar()}
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default MachineScheduleCalendar;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\machine-scheduler\components\SequentialOperationsView.tsx
import React from 'react';
import { calculateWorkingDays } from '../../utils/utils';

interface SequentialOperationsViewProps {
  operations: any[];
}

const SequentialOperationsView: React.FC<SequentialOperationsViewProps> = ({ operations }) => {
  return (
    <div className="bg-gray-800 rounded-xl p-4">
      <h2 className="text-lg font-semibold text-white mb-4">Последовательность операций</h2>
      {operations.length === 0 ? (
        <p className="text-gray-400">Нет операций</p>
      ) : (
        <ul className="space-y-2">
          {operations.map((op, index) => (
            <li key={op.id} className="bg-gray-700 p-2 rounded text-white">
              <span>Операция #{op.opNumber}: {op.opAxes}</span>
              <span className="ml-2">Время: {op.opTime} мин</span>
              {index > 0 && (
                <span className="ml-2">
                  Интервал: {calculateWorkingDays(new Date(operations[index - 1].endDate), new Date(op.startDate))} дней
                </span>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default SequentialOperationsView; 


================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\machine-scheduler\models\ScheduleModels.ts
 
export interface Machine {
  id: number;
  name: string;
  releaseDate: string;
}

export interface Operation {
  id: number;
  machineId: number;
  opNumber: number;
  opTime: number;
  opAxes: string;
}

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\order-management\api\ordersApi.ts
 //my-front\src\order-management\api\ordersApi.ts

 import axios from 'axios';
 import { handleError } from '../../utils/utils';
 
 const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';
 
 let mockOrders = [
   { id: 1, blueprintNumber: 'BP001', quantity: 10, deadline: '2025-04-01', status: 'новый', operations: [], pdfFile: null },
   { id: 2, blueprintNumber: 'BP002', quantity: 5, deadline: '2025-03-25', status: 'в работе', operations: [], pdfFile: null },
   { id: 3, blueprintNumber: 'BP003', quantity: 20, deadline: '2025-04-10', status: 'новый', operations: [], pdfFile: null },
   { id: 4, blueprintNumber: 'BP004', quantity: 15, deadline: '2025-03-30', status: 'в работе', operations: [], pdfFile: null },
   { id: 5, blueprintNumber: 'BP005', quantity: 8, deadline: '2025-04-15', status: 'завершен', operations: [], pdfFile: null },
 ];
 
 export const fetchOrders = async () => {
  try {
    if (import.meta.env.VITE_USE_MOCK === 'true') {
      return mockOrders;
    }
    const response = await axios.get(`${API_URL}/orders`);
    console.log('API ответ:', response.data); // Добавлено логирование
    return response.data;
  } catch (error) {
    handleError('Ошибка при загрузке заказов:', error);
    console.log('Возвращаем моковые данные заказов из-за ошибки API');
    return mockOrders;
  }
};
 
 export const createOrder = async (orderData: any) => {
   try {
     if (import.meta.env.VITE_USE_MOCK === 'true') {
       const newOrder = { ...orderData, id: Date.now() };
       mockOrders.push(newOrder);
       return newOrder;
     }
     const response = await axios.post(`${API_URL}/orders`, orderData);
     return response.data;
   } catch (error) {
     handleError('Ошибка при создании заказа:', error);
     // В случае ошибки при создании всё равно возвращаем сфабрикованный заказ для тестирования
     const newOrder = { ...orderData, id: Date.now() };
     mockOrders.push(newOrder);
     return newOrder;
   }
 };
 
 export const updateOrder = async (orderData: any) => {
   try {
     if (import.meta.env.VITE_USE_MOCK === 'true') {
       mockOrders = mockOrders.map(o => (o.id === orderData.id ? orderData : o));
       return orderData;
     }
     const response = await axios.put(`${API_URL}/orders/${orderData.id}`, orderData);
     return response.data;
   } catch (error) {
     handleError('Ошибка при обновлении заказа:', error);
     // В случае ошибки всё равно обновляем локальные данные
     mockOrders = mockOrders.map(o => (o.id === orderData.id ? orderData : o));
     return orderData;
   }
 };
 
 export const deleteOrder = async (id: number) => {
   try {
     if (import.meta.env.VITE_USE_MOCK === 'true') {
       mockOrders = mockOrders.filter(o => o.id !== id);
       return;
     }
     await axios.delete(`${API_URL}/orders/${id}`);
   } catch (error) {
     handleError('Ошибка при удалении заказа:', error);
     // В случае ошибки всё равно удаляем из локальных данных
     mockOrders = mockOrders.filter(o => o.id !== id);
   }
 };

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\order-management\components\OrderDetailView.tsx
import React from 'react';
import { Button } from '../../ui-components/components/Button';

interface OrderDetailViewProps {
  order: any;
  onClose: () => void;
}

const OrderDetailView: React.FC<OrderDetailViewProps> = ({ order, onClose }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-gray-800 p-6 rounded-lg w-96">
        <h2 className="text-xl font-semibold text-white mb-4">Детали заказа</h2>
        <p className="text-gray-300 mb-2"><strong>Номер чертежа:</strong> {order.blueprintNumber}</p>
        <p className="text-gray-300 mb-2"><strong>Количество:</strong> {order.quantity} шт.</p>
        <p className="text-gray-300 mb-2"><strong>Срок:</strong> {order.deadline || 'Не указан'}</p>
        <p className="text-gray-300 mb-2"><strong>Статус:</strong> {order.status}</p>
        {order.operations && order.operations.length > 0 && (
          <div className="mb-4">
            <p className="text-gray-300 mb-1"><strong>Операции:</strong></p>
            <ul className="text-gray-300 text-sm">
              {order.operations.map((op: any) => (
                <li key={op.id}>#{op.opNumber}: {op.opAxes}, {op.opTime} мин</li>
              ))}
            </ul>
          </div>
        )}
        {order.pdfFile && (
          <p className="text-gray-300 mb-4">
            <strong>PDF:</strong> <a href={order.pdfFile} target="_blank" className="text-indigo-400">Открыть</a>
          </p>
        )}
        <div className="flex justify-end">
          <Button variant="secondary" onClick={onClose}>
            Закрыть
          </Button>
        </div>
      </div>
    </div>
  );
};

export default OrderDetailView;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\order-management\components\OrderForm.tsx
import React, { useState, useCallback, useEffect } from 'react';
import { Button } from '../../ui-components/components/Button';
import { Input } from '../../ui-components/components/Input';
import { format } from 'date-fns';

interface OrderFormProps {
  order?: any;
  onSubmit: (orderData: any) => void;
  onClose: () => void;
}

// Определим типы для событий
interface FileInputEvent extends React.ChangeEvent<HTMLInputElement> {
  target: HTMLInputElement & {
    files: FileList | null;
  };
}

interface InputChangeEvent extends React.ChangeEvent<HTMLInputElement> {
  target: HTMLInputElement & {
    value: string;
  };
}

interface SelectChangeEvent extends React.ChangeEvent<HTMLSelectElement> {
  target: HTMLSelectElement & {
    value: string;
  };
}

const OrderForm: React.FC<OrderFormProps> = ({ order, onSubmit, onClose }) => {
  // Инициализация состояния формы
  const [formData, setFormData] = useState({
    id: order?.id || Date.now(),
    blueprintNumber: order?.blueprintNumber || '',
    quantity: order?.quantity || '',
    deadline: order?.deadline ? format(new Date(order.deadline), 'yyyy-MM-dd') : format(new Date(), 'yyyy-MM-dd'),
    status: order?.status || 'новый',
    operations: order?.operations || [],
    pdfFile: order?.pdfFile || null,
    priority: order?.priority || 1,
    materialType: order?.materialType || '',
  });

  // Валидация формы
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isFormValid, setIsFormValid] = useState(false);

  // Валидация при изменении данных
  useEffect(() => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.blueprintNumber.trim()) {
      newErrors.blueprintNumber = 'Номер чертежа обязателен';
    }
    
    if (!formData.quantity) {
      newErrors.quantity = 'Количество обязательно';
    } else if (Number(formData.quantity) <= 0) {
      newErrors.quantity = 'Количество должно быть больше нуля';
    }
    
    setErrors(newErrors);
    setIsFormValid(Object.keys(newErrors).length === 0);
  }, [formData]);

  // Обработчик изменения полей формы
  const handleChange = useCallback((field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  }, []);

  // Обработчик файла PDF
  const handleFileChange = useCallback((e: FileInputEvent) => {
    const file = e.target.files?.[0] || null;
    setFormData(prev => ({ ...prev, pdfFile: file }));
  }, []);

  // Обработчик отправки формы
  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    if (isFormValid) {
      onSubmit(formData);
    }
  }, [formData, isFormValid, onSubmit]);

  // Обработчик добавления операции
  const addOperation = useCallback(() => {
    const newOperation = {
      id: Date.now(),
      machineId: 0,
      opNumber: formData.operations.length + 1,
      opTime: 0,
      opAxes: '3х',
    };
    
    setFormData(prev => ({
      ...prev,
      operations: [...prev.operations, newOperation],
    }));
  }, [formData.operations]);

  // Обработчик изменения операции
  const updateOperation = useCallback((opId: number, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      operations: prev.operations.map((op: any) =>
        op.id === opId ? { ...op, [field]: value } : op
      ),
    }));
  }, []);

  // Обработчик удаления операции
  const removeOperation = useCallback((opId: number) => {
    setFormData(prev => ({
      ...prev,
      operations: prev.operations.filter((op: any) => op.id !== opId),
    }));
  }, []);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
      <div className="bg-gray-800 rounded-lg shadow-xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-gray-800 p-4 border-b border-gray-700 rounded-t-lg">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold text-white">
              {order ? 'Редактировать заказ' : 'Создать заказ'}
            </h2>
            <button 
              onClick={onClose}
              className="text-gray-400 hover:text-white"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        
        <form onSubmit={handleSubmit} className="p-4">
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Номер чертежа
            </label>
            <Input
              value={formData.blueprintNumber}
              onChange={(e: InputChangeEvent) => handleChange('blueprintNumber', e.target.value)}
              placeholder="Введите номер чертежа"
              error={errors.blueprintNumber}
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Количество
            </label>
            <Input
              type="number"
              value={formData.quantity}
              onChange={(e: InputChangeEvent) => handleChange('quantity', e.target.value)}
              placeholder="Введите количество"
              error={errors.quantity}
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Срок выполнения
            </label>
            <div className="relative">
              <Input
                type="date"
                value={formData.deadline}
                onChange={(e: InputChangeEvent) => handleChange('deadline', e.target.value)}
              />
              <div 
                className="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer"
                onClick={() => {
                  // Программно активируем input для выбора даты
                  const input = document.querySelector('input[type="date"]');
                  if (input) {
                    (input as HTMLElement).click();
                  }
                }}
              >
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
            </div>
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Статус
            </label>
            <select
              value={formData.status}
              onChange={(e: SelectChangeEvent) => handleChange('status', e.target.value)}
              className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <option value="новый">Новый</option>
              <option value="в работе">В работе</option>
              <option value="завершен">Завершен</option>
            </select>
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Приоритет
            </label>
            <select
              value={formData.priority}
              onChange={(e: SelectChangeEvent) => handleChange('priority', parseInt(e.target.value))}
              className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <option value="1">Обычный (1)</option>
              <option value="2">Высокий (2)</option>
              <option value="3">Срочный (3)</option>
            </select>
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Материал
            </label>
            <Input
              value={formData.materialType}
              onChange={(e: InputChangeEvent) => handleChange('materialType', e.target.value)}
              placeholder="Тип материала"
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 text-sm font-medium mb-1">
              Чертеж (PDF файл)
            </label>
            <div className="flex items-center">
              <input
                type="file"
                onChange={handleFileChange as any} // Используем cast к any как временное решение
                className="hidden"
                id="pdf-upload"
                accept=".pdf"
              />
              <label 
                htmlFor="pdf-upload"
                className="cursor-pointer bg-gray-700 text-white py-2 px-4 rounded border border-gray-600 hover:bg-gray-600"
              >
                Выбрать файл
              </label>
              <span className="ml-2 text-gray-300 text-sm">
                {formData.pdfFile ? formData.pdfFile.name || 'Файл выбран' : 'Файл не выбран'}
              </span>
            </div>
          </div>
          
          <div className="mb-4">
            <div className="flex justify-between items-center mb-2">
              <label className="block text-gray-300 text-sm font-medium">
                Операции
              </label>
              <Button 
                variant="secondary" 
                size="sm" 
                onClick={addOperation} 
                type="button"
              >
                Добавить операцию
              </Button>
            </div>
            
            {formData.operations.length === 0 ? (
              <p className="text-gray-400 text-center py-4 bg-gray-700 rounded">
                Нет операций. Добавьте операцию для заказа.
              </p>
            ) : (
              <div className="space-y-3">
                {formData.operations.map((op: any) => (
                  <div key={op.id} className="bg-gray-700 p-3 rounded relative">
                    <button
                      type="button"
                      onClick={() => removeOperation(op.id)}
                      className="absolute top-2 right-2 text-gray-400 hover:text-red-500"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                    
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <label className="block text-gray-300 text-xs font-medium mb-1">
                          Номер операции
                        </label>
                        <Input
                          type="number"
                          value={op.opNumber}
                          onChange={(e: InputChangeEvent) => updateOperation(op.id, 'opNumber', Number(e.target.value))}
                          placeholder="№"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-gray-300 text-xs font-medium mb-1">
                          Оси
                        </label>
                        <div className="flex space-x-2">
                          <button
                            type="button"
                            className={`px-3 py-2 rounded text-sm ${op.opAxes === '3х' ? 'bg-indigo-600' : 'bg-gray-600'}`}
                            onClick={() => updateOperation(op.id, 'opAxes', '3х')}
                          >
                            3х
                          </button>
                          <button
                            type="button"
                            className={`px-3 py-2 rounded text-sm ${op.opAxes === '4х' ? 'bg-indigo-600' : 'bg-gray-600'}`}
                            onClick={() => updateOperation(op.id, 'opAxes', '4х')}
                          >
                            4х
                          </button>
                          <button
                            type="button"
                            className={`px-3 py-2 rounded text-sm ${op.opAxes === 'токарный' ? 'bg-indigo-600' : 'bg-gray-600'}`}
                            onClick={() => updateOperation(op.id, 'opAxes', 'токарный')}
                          >
                            Токарный
                          </button>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-gray-300 text-xs font-medium mb-1">
                          Время (мин)
                        </label>
                        <Input
                          type="number"
                          value={op.opTime}
                          onChange={(e: InputChangeEvent) => updateOperation(op.id, 'opTime', Number(e.target.value))}
                          placeholder="Время"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-gray-300 text-xs font-medium mb-1">
                          Станок
                        </label>
                        <select
                          value={op.machineId}
                          onChange={(e: SelectChangeEvent) => updateOperation(op.id, 'machineId', Number(e.target.value))}
                          className="w-full p-2 rounded bg-gray-600 text-white border border-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        >
                          <option value="0">Выберите станок</option>
                          <option value="1">Doosan Hadasha (3х, 4х)</option>
                          <option value="2">Doosan Yashana (3х, 4х)</option>
                          <option value="3">Pinnacle Gdola (3х, 4х)</option>
                          <option value="4">Pinnacle Ktana (3х)</option>
                          <option value="5">Mitsubishi (3х)</option>
                          <option value="6">Okuma (токарный)</option>
                          <option value="7">JohnFord (токарный)</option>
                        </select>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          <div className="flex justify-end gap-3 pt-3 border-t border-gray-700">
            <Button variant="secondary" onClick={onClose} type="button">
              Отмена
            </Button>
            <Button variant="primary" type="submit" disabled={!isFormValid}>
              {order ? 'Сохранить изменения' : 'Создать заказ'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default OrderForm;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\order-management\components\OrdersList.tsx
// src/order-management/components/OrdersList.tsx
import React, { useState } from 'react';
import { format } from 'date-fns'; // Добавляем импорт
import { Button } from '../../ui-components/components/Button';
import { Order } from '../../api-client/ordersAdapter';

interface OrdersListProps {
  orders: Order[];
  onDelete: (id: number) => void;
  onSelect: (id: number) => void;
  onComplete: (id: number) => void;
}

const OrdersList: React.FC<OrdersListProps> = ({ orders, onDelete, onSelect, onComplete }) => {
  const [expandedOrderId, setExpandedOrderId] = useState<number | null>(null);
  const [isProcessing, setIsProcessing] = useState<number | null>(null); // Добавляем состояние загрузки

  // Функция для открытия/закрытия деталей заказа
  const toggleOrderDetails = (id: number) => {
    setExpandedOrderId(expandedOrderId === id ? null : id);
  };

  // Форматирование даты с использованием date-fns
  const formatDate = (dateStr?: string) => {
    if (!dateStr) return 'Не указано';
    try {
      return format(new Date(dateStr), 'dd.MM.yyyy');
    } catch (e) {
      return dateStr;
    }
  };

  // Обработчик асинхронных действий
  const handleAction = async (action: () => void, id: number) => {
    setIsProcessing(id);
    await action();
    setIsProcessing(null);
  };

  // Если нет заказов для отображения
  if (!orders || orders.length === 0) {
    return (
      <div className="bg-gray-800 p-6 rounded-lg text-center">
        <p className="text-gray-400">Нет заказов для отображения</p>
      </div>
    );
  }

  console.log(`Отображаем ${orders.length} заказов`);

  return (
    <div className="space-y-4">
      {orders.map(order => (
        <div 
          key={order.id} 
          className="bg-gray-800 rounded-lg overflow-hidden shadow-lg"
        >
          {/* Заголовок заказа - кликабельный */}
          <div 
            className="p-4 bg-gray-700 flex justify-between items-center cursor-pointer"
            onClick={() => toggleOrderDetails(order.id)}
          >
            <div className="flex items-center">
              <span className="font-medium text-lg">{order.blueprintNumber}</span>
              <span className={`ml-3 px-2 py-1 text-xs rounded-full ${
                order.status === 'новый' ? 'bg-indigo-600 text-white' :
                order.status === 'в работе' ? 'bg-amber-600 text-white' :
                order.status === 'завершен' ? 'bg-emerald-600 text-white' :
                'bg-gray-600 text-white'
              }`}>
                {order.status}
              </span>
            </div>
            
            <div className="flex items-center">
              {order.priority > 1 && (
                <span className="mr-3 px-2 py-1 bg-red-600 rounded text-xs text-white">
                  Приоритет: {order.priority}
                </span>
              )}
              <span className="text-lg">{expandedOrderId === order.id ? '▼' : '▶'}</span>
            </div>
          </div>
          
          {/* Детали заказа - отображаются при клике */}
          {expandedOrderId === order.id && (
            <div className="p-4">
              {/* Основная информация */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <h3 className="text-lg font-medium mb-2">Основная информация</h3>
                  <div className="space-y-1">
                    <p><span className="text-gray-400">ID:</span> {order.id}</p>
                    <p><span className="text-gray-400">Чертеж:</span> {order.blueprintNumber}</p>
                    <p><span className="text-gray-400">Количество:</span> {order.quantity} шт.</p>
                    <p><span className="text-gray-400">Приоритет:</span> {order.priority}</p>
                    <p><span className="text-gray-400">Станок:</span> {order.machineName || 'Не назначен'}</p>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-2">Сроки</h3>
                  <div className="space-y-1">
                    <p><span className="text-gray-400">Срок сдачи:</span> {formatDate(order.deadline)}</p>
                    <p><span className="text-gray-400">Дата начала:</span> {formatDate(order.startDate)}</p>
                    <p><span className="text-gray-400">Расчетное окончание:</span> {formatDate(order.estimatedCompletion)}</p>
                    <p>
                      <span className="text-gray-400">Уложится в срок:</span>
                      <span className={`ml-2 ${order.willMeetDeadline ? 'text-green-500' : 'text-red-500'}`}>
                        {order.willMeetDeadline ? 'Да' : 'Нет'}
                      </span>
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Операции */}
              {order.operations && order.operations.length > 0 && (
                <div className="mb-4">
                  <h3 className="text-lg font-medium mb-2">Операции</h3>
                  <div className="bg-gray-700 p-2 rounded-lg">
                    <table className="w-full">
                      <thead>
                        <tr className="text-left">
                          <th className="p-2">№</th>
                          <th className="p-2">Тип</th>
                          <th className="p-2">Время (мин)</th>
                          <th className="p-2">Станок</th>
                          <th className="p-2">Начало</th>
                          <th className="p-2">Окончание</th>
                        </tr>
                      </thead>
                      <tbody>
                        {order.operations.map((op, index) => (
                          <tr key={`${order.id}-op-${index}`} className="border-t border-gray-600">
                            <td className="p-2">{op.opNumber}</td>
                            <td className="p-2">{op.opAxes}</td>
                            <td className="p-2">{op.opTime}</td>
                            <td className="p-2">{op.assignedMachine || '-'}</td>
                            <td className="p-2">{formatDate(op.startDate)}</td>
                            <td className="p-2">{formatDate(op.endDate)}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
              
              {/* Дополнительная информация */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                {order.materialType && (
                  <div>
                    <p><span className="text-gray-400">Материал:</span> {order.materialType}</p>
                  </div>
                )}
                
                {order.pdfPath && (
                  <div>
                    <p>
                      <span className="text-gray-400">PDF:</span>
                      <a 
                        href={order.pdfPath} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="ml-2 text-indigo-400 hover:text-indigo-300"
                      >
                        Открыть PDF
                      </a>
                    </p>
                  </div>
                )}
                
                {order.drawingUrl && (
                  <div>
                    <p>
                      <span className="text-gray-400">Чертеж:</span>
                      <a 
                        href={order.drawingUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="ml-2 text-indigo-400 hover:text-indigo-300"
                      >
                        Открыть чертеж
                      </a>
                    </p>
                  </div>
                )}
              </div>
              
              {/* Кнопки действий */}
              <div className="flex justify-end space-x-3 mt-4 border-t border-gray-700 pt-4">
                <Button
                  variant="primary"
                  size="sm"
                  onClick={() => onSelect(order.id)}
                >
                  Редактировать
                </Button>
                
                {order.status !== 'завершен' && (
                  <Button
                    variant="success"
                    size="sm"
                    onClick={() => handleAction(() => onComplete(order.id), order.id)}
                    disabled={isProcessing === order.id}
                  >
                    {isProcessing === order.id ? 'Завершение...' : 'Завершить'}
                  </Button>
                )}
                
                <Button
                  variant="danger"
                  size="sm"
                  onClick={() => {
                    if (window.confirm(`Вы уверены, что хотите удалить заказ #${order.id}?`)) {
                      handleAction(() => onDelete(order.id), order.id);
                    }
                  }}
                  disabled={isProcessing === order.id}
                >
                  {isProcessing === order.id ? 'Удаление...' : 'Удалить'}
                </Button>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default OrdersList;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\order-management\components\OrdersPage.tsx
// src/order-management/components/OrdersPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '../../ui-components/components/Button';
import { fetchOrders, createOrder, updateOrder, deleteOrder } from '../../api-client/ordersApi';
import { filterOrders } from '../../utils/utils';
import { Order } from '../../api-client/ordersAdapter';
import OrdersList from './OrdersList';
import OrderForm from './OrderForm';
import OrderDetailView from './OrderDetailView';
import SearchBar from './SearchBar';

const OrdersPage: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<Order[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isDetailOpen, setIsDetailOpen] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadOrders = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await fetchOrders();
      console.log('Загружены заказы:', data.length);
      setOrders(data);
      setFilteredOrders(data);
    } catch (error) {
      console.error('Ошибка при загрузке заказов:', error);
      setError('Не удалось загрузить заказы. Попробуйте позже.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadOrders();
  }, [loadOrders]);

  useEffect(() => {
    const result = filterOrders(orders, searchTerm, statusFilter);
    setFilteredOrders(result);
  }, [searchTerm, statusFilter, orders]);

  const handleCreate = useCallback(() => {
    setSelectedOrder(null);
    setIsFormOpen(true);
  }, []);

  const handleEdit = useCallback((id: number) => {
    const order = orders.find(o => o.id === id);
    setSelectedOrder(order || null); // Добавляем проверку на undefined
    setIsFormOpen(true);
  }, [orders]);

  // const handleView = useCallback((id: number) => {
  //   const order = orders.find(o => o.id === id);
  //   setSelectedOrder(order || null); // Добавляем проверку на undefined
  //   setIsDetailOpen(true);
  // }, [orders]);

  const handleSubmit = useCallback(async (orderData: any) => {
    try {
      if (selectedOrder) {
        const updatedOrderData = { 
          ...selectedOrder, 
          ...orderData,
          id: selectedOrder.id
        };
        const updatedOrder = await updateOrder(updatedOrderData);
        setOrders(orders.map(o => (o.id === updatedOrder.id ? updatedOrder : o)));
      } else {
        const newOrder = await createOrder(orderData);
        setOrders([...orders, newOrder]);
      }
      setIsFormOpen(false);
      setSelectedOrder(null);
    } catch (error) {
      console.error('Ошибка при сохранении заказа:', error);
      setError('Не удалось сохранить заказ.');
    }
  }, [selectedOrder, orders]);

  const handleDelete = useCallback(async (id: number) => {
    try {
      await deleteOrder(id);
      setOrders(orders.filter(o => o.id !== id));
    } catch (error) {
      console.error('Ошибка при удалении заказа:', error);
      setError('Не удалось удалить заказ.');
    }
  }, [orders]);

  const handleComplete = useCallback(async (id: number) => {
    try {
      const order = orders.find(o => o.id === id);
      if (order) {
        const updatedOrder = await updateOrder({ ...order, status: 'завершен' });
        setOrders(orders.map(o => (o.id === updatedOrder.id ? updatedOrder : o)));
      }
    } catch (error) {
      console.error('Ошибка при завершении заказа:', error);
      setError('Не удалось завершить заказ.');
    }
  }, [orders]);

  const handleCloseForm = useCallback(() => {
    setIsFormOpen(false);
  }, []);

  const handleCloseDetail = useCallback(() => {
    setIsDetailOpen(false);
  }, []);

  const handleSearchChange = useCallback((value: string) => {
    setSearchTerm(value);
  }, []);

  const handleStatusChange = useCallback((value: string) => {
    setStatusFilter(value);
  }, []);

  return (
    <div className="py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="page-title">Управление заказами</h1>
        <Button 
          variant="primary" 
          onClick={handleCreate}
          className="flex items-center"
        >
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          Создать заказ
        </Button>
      </div>

      <div className="card mb-6">
        <SearchBar
          searchTerm={searchTerm}
          onSearchChange={handleSearchChange}
          statusFilter={statusFilter}
          onStatusChange={handleStatusChange}
        />
      </div>

      {error && <div className="text-red-400 mb-4">{error}</div>}

      {isLoading ? (
        <div className="card flex justify-center items-center p-12">
          <div className="loader">Загрузка заказов...</div>
        </div>
      ) : filteredOrders.length === 0 ? (
        <div className="card flex flex-col items-center justify-center p-12 text-center">
          <svg className="w-16 h-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <p className="text-xl text-gray-300 mb-2">Заказы не найдены</p>
          <p className="text-gray-400 mb-6">
            {searchTerm || statusFilter !== 'all' 
              ? 'Попробуйте изменить параметры поиска или фильтрации' 
              : 'Создайте новый заказ, чтобы начать работу'}
          </p>
          <Button variant="primary" onClick={handleCreate}>
            Создать заказ
          </Button>
        </div>
      ) : (
        <div className="card">
          <OrdersList
            orders={filteredOrders}
            onDelete={handleDelete}
            onSelect={handleEdit}
            onComplete={handleComplete}
          />
        </div>
      )}

      {isFormOpen && (
        <OrderForm
          order={selectedOrder}
          onSubmit={handleSubmit}
          onClose={handleCloseForm}
        />
      )}

      {isDetailOpen && selectedOrder && (
        <OrderDetailView
          order={selectedOrder}
          onClose={handleCloseDetail}
        />
      )}
    </div>
  );
};

export default OrdersPage;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\order-management\components\SearchBar.tsx
import React, { memo } from 'react';
import { Input } from '../../ui-components/components/Input';

interface SearchBarProps {
  searchTerm: string;
  onSearchChange: (value: string) => void;
  statusFilter: string;
  onStatusChange: (value: string) => void;
}

// Используем memo для оптимизации рендеринга
const SearchBar: React.FC<SearchBarProps> = memo(({
  searchTerm,
  onSearchChange,
  statusFilter,
  onStatusChange,
}) => {
  return (
    <div className="flex flex-col md:flex-row gap-4">
      <div className="relative flex-1">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <Input
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          placeholder="Поиск по номеру чертежа"
          className="pl-10"
        />
      </div>
      
      <div className="w-full md:w-64">
        <select
          value={statusFilter}
          onChange={(e) => onStatusChange(e.target.value)}
          className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        >
          <option value="all">Все статусы</option>
          <option value="новый">Новый</option>
          <option value="в работе">В работе</option>
          <option value="завершен">Завершен</option>
        </select>
      </div>
    </div>
  );
});

// Для отладки в React DevTools
SearchBar.displayName = 'SearchBar';

export default SearchBar;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\public\index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Alphabet Trainer Pro</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\schedule-calculator\components\CalculationPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { format } from 'date-fns';
import { Button } from '../../ui-components/components/Button';
import { fetchOrders, fetchMachines, updateOrder } from '../../api-client/ordersApi';
import { calculateSchedule } from '../services/ScheduleService';

const CalculationPage: React.FC = () => {
  const [orders, setOrders] = useState<any[]>([]);
  const [machines, setMachines] = useState<any[]>([]);
  const [schedule, setSchedule] = useState<any[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);
  const [startDate, setStartDate] = useState<Date>(new Date());
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [isFirstTimeCalculation, setIsFirstTimeCalculation] = useState(true);
  const [ordersWithNewDeadlines, setOrdersWithNewDeadlines] = useState<any[]>([]);

  // Загрузка данных при монтировании компонента
  useEffect(() => {
    const loadData = async () => {
      try {
        const [ordersData, machinesData] = await Promise.all([
          fetchOrders(),
          fetchMachines()
        ]);
        
        console.log('Загружено заказов:', ordersData.length);
        console.log('Загружено станков:', machinesData.length);
        
        // Если у заказов уже есть запланированные операции, это не первичное планирование
        const hasPlannedOperations = ordersData.some((order: any) => 
          order.operations && order.operations.some((op: any) => 
            op.isInitiallyPlanned && op.startDate && op.endDate
          )
        );
        
        setIsFirstTimeCalculation(!hasPlannedOperations);
        setOrders(ordersData);
        setMachines(machinesData);
        setErrorMessage(null);
      } catch (error) {
        console.error('Ошибка при загрузке данных:', error);
        setErrorMessage('Не удалось загрузить данные. Пожалуйста, попробуйте позже.');
      }
    };
    
    loadData();
  }, []);

  // Обработчик изменения начальной даты
  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newDate = new Date(e.target.value);
    setStartDate(newDate);
  };

  // Функция для расчета расписания
  const handleCalculate = useCallback(async () => {
    setIsCalculating(true);
    setErrorMessage(null);
    setSuccessMessage(null);
    setOrdersWithNewDeadlines([]);
    
    try {
      if (orders.length === 0) {
        setErrorMessage('Нет заказов для распределения.');
        setIsCalculating(false);
        return;
      }
      
      if (machines.length === 0) {
        setErrorMessage('Нет доступных станков для распределения.');
        setIsCalculating(false);
        return;
      }
      
      console.log(`Начало расчета расписания с ${format(startDate, 'yyyy-MM-dd')}`);
      console.log(`Режим расчета: ${isFirstTimeCalculation ? 'Первичное планирование' : 'Корректировка'}`);
      
      // Копируем заказы, чтобы не изменить оригинальные объекты
      const ordersCopy = JSON.parse(JSON.stringify(orders));
      
      // Обновляем сигнатуру вызова функции расчета, передаем только 3 аргумента
      const calculatedSchedule = calculateSchedule(
        ordersCopy, 
        machines, 
        startDate
      );
      
      setSchedule(calculatedSchedule);
      
      // Находим заказы с новыми сроками сдачи
      const ordersWithChangedDeadlines = ordersCopy.filter((order: any) => 
        order.newDeadline && 
        new Date(order.deadline) < new Date(order.newDeadline)
      );
      
      setOrdersWithNewDeadlines(ordersWithChangedDeadlines);
      
      if (ordersWithChangedDeadlines.length > 0) {
        setSuccessMessage(`Расписание рассчитано. ${ordersWithChangedDeadlines.length} заказов не успевают к сроку.`);
      } else {
        setSuccessMessage('Расписание успешно рассчитано. Все заказы успевают к сроку.');
      }
      
    } catch (error) {
      console.error('Ошибка при расчете расписания:', error);
      setErrorMessage('Произошла ошибка при расчете расписания. Проверьте данные и попробуйте снова.');
    } finally {
      setIsCalculating(false);
    }
  }, [orders, machines, startDate, isFirstTimeCalculation]);

  // Функция для сохранения рассчитанного расписания
  const handleSaveSchedule = useCallback(async () => {
    if (schedule.length === 0) {
      setErrorMessage('Нет рассчитанного расписания для сохранения.');
      return;
    }
    
    try {
      setIsCalculating(true);
      
      // Собираем все операции из расписания по заказам
      const allScheduledOperations: {[orderId: number]: any[]} = {};
      
      schedule.forEach(machineSchedule => {
        machineSchedule.operations.forEach((op: any) => {
          const orderId = op.orderId;
          
          if (!allScheduledOperations[orderId]) {
            allScheduledOperations[orderId] = [];
          }
          
          // Добавляем операцию к заказу
          allScheduledOperations[orderId].push({
            opNumber: op.opNumber,
            opTime: op.opTime,
            opAxes: op.opAxes,
            assignedMachine: op.assignedMachine,
            machineId: op.machineId,
            startDate: format(op.startDate, 'yyyy-MM-dd'),
            endDate: format(op.endDate, 'yyyy-MM-dd'),
            isInitiallyPlanned: true,
            lastModifiedBy: 'system',
            lastModifiedDate: new Date().toISOString()
          });
        });
      });
      
      // Для каждого заказа обновляем его операции
      const orderUpdatePromises = Object.entries(allScheduledOperations).map(
        async ([orderIdStr, operations]) => {
          const orderId = parseInt(orderIdStr);
          const order = orders.find(o => o.id === orderId);
          
          if (order) {
            // Находим самую позднюю дату окончания операции
            const latestEndDate = operations.reduce((latest, op) => {
              const endDate = new Date(op.endDate);
              return endDate > latest ? endDate : latest;
            }, new Date(0));
            
            // Проверяем, укладываемся ли в срок
            const deadline = new Date(order.deadline);
            const willMeetDeadline = latestEndDate <= deadline;
            
            // Создаем обновленный заказ
            const updatedOrder = {
              ...order,
              operations: operations,
              startDate: operations[0]?.startDate || order.startDate,
              estimatedCompletion: format(latestEndDate, 'yyyy-MM-dd'),
              willMeetDeadline: willMeetDeadline,
              status: 'в работе'
            };
            
            // Если есть новый срок, добавляем его
            const matchingOrderWithNewDeadline = ordersWithNewDeadlines.find(o => o.id === orderId);
            if (matchingOrderWithNewDeadline && matchingOrderWithNewDeadline.newDeadline) {
              updatedOrder.newDeadline = matchingOrderWithNewDeadline.newDeadline;
            }
            
            // Обновляем заказ через API
            return updateOrder(updatedOrder);
          }
          
          return Promise.resolve();
        }
      );
      
      // Ждем завершения всех обновлений
      await Promise.all(orderUpdatePromises);
      
      setSuccessMessage('Расписание успешно сохранено. Заказы обновлены.');
      
      // Обновляем состояние первичного планирования
      setIsFirstTimeCalculation(false);
      
    } catch (error) {
      console.error('Ошибка при сохранении расписания:', error);
      setErrorMessage('Произошла ошибка при сохранении расписания.');
    } finally {
      setIsCalculating(false);
    }
  }, [schedule, orders, ordersWithNewDeadlines]);

  // Функция для отображения информации о загрузке станка
  const calculateMachineLoad = useCallback((machineSchedule: any) => {
    if (!machineSchedule.operations.length) return 0;
    
    // Рассчитываем общее время работы станка (в часах)
    const totalWorkHours = machineSchedule.operations.reduce((total: number, op: any) => {
      const startDate = new Date(op.startDate);
      const endDate = new Date(op.endDate);
      const diffMs = endDate.getTime() - startDate.getTime();
      const diffHours = diffMs / (1000 * 60 * 60);
      return total + diffHours;
    }, 0);
    
    // Рассчитываем период планирования (в рабочих днях)
    const earliestStart = machineSchedule.operations.reduce(
      (earliest: Date, op: any) => {
        const startDate = new Date(op.startDate);
        return startDate < earliest ? startDate : earliest;
      },
      new Date(machineSchedule.operations[0].startDate)
    );
    
    const latestEnd = machineSchedule.operations.reduce(
      (latest: Date, op: any) => {
        const endDate = new Date(op.endDate);
        return endDate > latest ? endDate : latest;
      },
      new Date(machineSchedule.operations[0].endDate)
    );
    
    // Примерно 16 рабочих часов в день
    const totalDays = Math.ceil((latestEnd.getTime() - earliestStart.getTime()) / (1000 * 60 * 60 * 24));
    const maxWorkHours = totalDays * 16;
    
    // Возвращаем загрузку в процентах (с округлением до целого числа)
    return Math.round((totalWorkHours / maxWorkHours) * 100);
  }, []);

  // Рендеринг таблицы заказов с новыми сроками
  const renderOrdersWithNewDeadlines = () => {
    if (ordersWithNewDeadlines.length === 0) return null;
    
    return (
      <div className="bg-yellow-800 bg-opacity-25 p-4 rounded-lg mb-6">
        <h3 className="text-lg font-semibold text-yellow-300 mb-3">Заказы, не успевающие к сроку:</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full bg-gray-700 rounded">
            <thead>
              <tr>
                <th className="px-4 py-2 text-left">№ Заказа</th>
                <th className="px-4 py-2 text-left">Текущий срок</th>
                <th className="px-4 py-2 text-left">Новый срок</th>
                <th className="px-4 py-2 text-left">Задержка (дней)</th>
              </tr>
            </thead>
            <tbody>
              {ordersWithNewDeadlines.map(order => {
                const currentDeadline = new Date(order.deadline);
                const newDeadline = new Date(order.newDeadline);
                const delayDays = Math.round((newDeadline.getTime() - currentDeadline.getTime()) / (1000 * 60 * 60 * 24));
                
                return (
                  <tr key={order.id} className="border-t border-gray-600">
                    <td className="px-4 py-2">{order.blueprintNumber}</td>
                    <td className="px-4 py-2">{format(currentDeadline, 'dd.MM.yyyy')}</td>
                    <td className="px-4 py-2 text-yellow-300">{format(newDeadline, 'dd.MM.yyyy')}</td>
                    <td className="px-4 py-2 text-red-300">{delayDays}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    );
  };

  // Отрисовка страницы
  return (
    <div className="p-6 bg-gray-900 min-h-screen">
      <h1 className="text-2xl font-bold text-white mb-6">Расчет производственного расписания</h1>
      
      {/* Сообщения об ошибках и успешных операциях */}
      {errorMessage && (
        <div className="bg-red-800 text-white p-4 rounded-lg mb-6">
          <p>{errorMessage}</p>
        </div>
      )}
      
      {successMessage && (
        <div className="bg-green-800 text-white p-4 rounded-lg mb-6">
          <p>{successMessage}</p>
        </div>
      )}
      
      {/* Таблица заказов с новыми сроками */}
      {renderOrdersWithNewDeadlines()}
      
      {/* Форма для расчета */}
      <div className="bg-gray-800 p-6 rounded-lg shadow-lg mb-8">
        <h2 className="text-xl font-semibold text-white mb-4">Параметры расчета</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <label className="block text-gray-300 text-sm mb-2">Начальная дата расчета:</label>
            <input
              type="date"
              value={format(startDate, 'yyyy-MM-dd')}
              onChange={handleDateChange}
              className="w-full p-3 rounded bg-gray-700 text-white"
            />
          </div>
          
          <div>
            <label className="block text-gray-300 text-sm mb-2">Режим расчета:</label>
            <div className="flex items-center space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  checked={isFirstTimeCalculation}
                  onChange={() => setIsFirstTimeCalculation(true)}
                  className="form-radio text-indigo-600"
                />
                <span className="ml-2 text-white">Первичное планирование</span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  checked={!isFirstTimeCalculation}
                  onChange={() => setIsFirstTimeCalculation(false)}
                  className="form-radio text-indigo-600"
                />
                <span className="ml-2 text-white">Корректировка</span>
              </label>
            </div>
          </div>
        </div>
        
        <div className="mb-4">
          <div className="text-gray-300 space-y-1">
            <p><span className="font-semibold">Заказов для распределения:</span> {orders.length}</p>
            <p><span className="font-semibold">Доступных станков:</span> {machines.length}</p>
          </div>
        </div>
        
        <div className="flex flex-wrap gap-4">
          <Button 
            variant="primary" 
            onClick={handleCalculate} 
            disabled={isCalculating || orders.length === 0 || machines.length === 0}
            className={isCalculating ? 'button-loading' : ''}
          >
            {isCalculating ? 'Расчет...' : 'Рассчитать расписание'}
          </Button>
          
          {schedule.length > 0 && (
            <Button 
              variant="success" 
              onClick={handleSaveSchedule} 
              disabled={isCalculating}
            >
              Сохранить расписание
            </Button>
          )}
          
          <Button
            variant="secondary"
            onClick={() => window.location.href = '/calendar'}
            disabled={isCalculating}
          >
            Перейти к календарю
          </Button>
        </div>
      </div>
      
      {/* Результаты расчета */}
      {schedule.length > 0 && (
        <div className="space-y-8">
          <h2 className="text-xl font-semibold text-white mb-4">Результаты расчета расписания</h2>
          
          {/* Сводная информация */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            {schedule.map(machineSchedule => (
              <div key={machineSchedule.machineId} className="bg-gray-800 p-4 rounded-lg shadow-lg">
                <h3 className="text-lg font-semibold text-white mb-2">{machineSchedule.machineName}</h3>
                <p className="text-gray-300 mb-1">
                  <span className="font-medium">Операций:</span> {machineSchedule.operations.length}
                </p>
                <p className="text-gray-300 mb-1">
                  <span className="font-medium">Загрузка:</span> {calculateMachineLoad(machineSchedule)}%
                </p>
                {machineSchedule.operations.length > 0 && (
                  <>
                    <p className="text-gray-300 mb-1">
                      <span className="font-medium">Начало:</span> {format(new Date(machineSchedule.operations[0].startDate), 'dd.MM.yyyy')}
                    </p>
                    <p className="text-gray-300">
                      <span className="font-medium">Окончание:</span> {format(new Date(machineSchedule.operations[machineSchedule.operations.length - 1].endDate), 'dd.MM.yyyy')}
                    </p>
                  </>
                )}
              </div>
            ))}
          </div>
          
          {/* Детальное расписание для каждого станка */}
          {schedule.map(machineSchedule => (
            <div key={`details-${machineSchedule.machineId}`} className="bg-gray-800 p-6 rounded-lg shadow-lg">
              <h3 className="text-lg font-semibold text-white mb-4">
                Расписание станка: {machineSchedule.machineName}
              </h3>
              
              {machineSchedule.operations.length === 0 ? (
                <p className="text-gray-400 text-center py-4">Нет операций для отображения</p>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full min-w-full divide-y divide-gray-700">
                    <thead className="bg-gray-700">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Заказ</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">№ Оп.</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Тип</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Кол-во</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Время (мин)</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Наладка (мин)</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Начало</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Окончание</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Срок</th>
                      </tr>
                    </thead>
                    <tbody className="bg-gray-800 divide-y divide-gray-700">
                      {machineSchedule.operations.map((op: any, index: number) => {
                        // Проверка соответствия сроку
                        const endDate = new Date(op.endDate);
                        const deadline = new Date(op.deadline || new Date());
                        const isOverdue = endDate > deadline;
                        const isCloseToDeadline = !isOverdue && 
                          (deadline.getTime() - endDate.getTime()) < 7 * 24 * 60 * 60 * 1000; // 7 дней
                        
                        return (
                          <tr 
                            key={`${op.orderId}-${op.opNumber}-${index}`}
                            className={`hover:bg-gray-700 ${
                              isOverdue ? 'bg-red-900 bg-opacity-30' : 
                              isCloseToDeadline ? 'bg-yellow-900 bg-opacity-30' : ''
                            }`}
                          >
                            <td className="px-4 py-3 whitespace-nowrap font-medium">
                              {op.blueprintNumber || `Заказ #${op.orderId}`}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {op.opNumber}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {op.opAxes}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {op.quantity}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {op.opTime * op.quantity}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              480
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {format(new Date(op.startDate), 'dd.MM.yyyy')}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {format(new Date(op.endDate), 'dd.MM.yyyy')}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              {format(new Date(op.deadline), 'dd.MM.yyyy')}
                              {isOverdue && (
                                <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-500 text-white">
                                  Просрочен
                                </span>
                              )}
                              {isCloseToDeadline && (
                                <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-500 text-white">
                                  Скоро
                                </span>
                              )}
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CalculationPage;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\schedule-calculator\components\MachineOperationsList.tsx
import React, { useState, useEffect } from 'react';
import { fetchMachines } from '../../api-client/ordersApi';
import { calculateWorkingDays } from '../../utils/utils';

const MachineOperationsList: React.FC = () => {
  const [machines, setMachines] = useState<any[]>([]);

  useEffect(() => {
    const loadMachines = async () => {
      try {
        const data = await fetchMachines();
        setMachines(data);
      } catch (error) {
        console.error('Ошибка при загрузке станков:', error);
      }
    };
    loadMachines();
  }, []);

  return (
    <div className="p-6 bg-gray-900 min-h-screen">
      <h1 className="text-2xl font-bold text-white mb-6">Список операций станков</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {machines.map(machine => (
          <div key={machine.id} className="bg-gray-800 p-4 rounded">
            <h2 className="text-lg font-semibold text-white">{machine.name}</h2>
            <p className="text-gray-300">
              Доступен с: {new Date(machine.releaseDate).toLocaleDateString()}
            </p>
            <p className="text-gray-300">
              Рабочих дней до конца месяца: {calculateWorkingDays(new Date(), new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0))}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MachineOperationsList;

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\schedule-calculator\services\ScheduleService.ts
// src/schedule-calculator/services/ScheduleService.ts

import { addDays, format } from 'date-fns';

// Интерфейсы для типизации
interface Operation {
  opNumber: number;
  opTime: number;
  opAxes: string;
  machineId?: number;
  assignedMachine?: string;
  blueprintNumber?: string;
  orderId?: number;
  deadline?: Date;
  quantity?: number;
  startDate?: Date;
  endDate?: Date;
  isInitiallyPlanned?: boolean;
  lastModifiedBy?: string;
  lastModifiedDate?: Date;
}

interface Order {
  id: number;
  blueprintNumber: string;
  quantity: number;
  deadline: string | Date;
  priority: number;
  status: string;
  operations: Operation[];
  willMeetDeadline?: boolean;
  estimatedCompletion?: string | Date;
  newDeadline?: string; // Добавлено поле для нового дедлайна
}

interface Machine {
  id: number;
  name: string;
  releaseDate: string | Date;
  types: string[];
}

interface MachineSchedule {
  machineId: number;
  machineName: string;
  releaseDate: Date;
  operations: any[];
}

interface HolidayInfo {
  date: Date;
  isEve?: boolean;
  isFullDay?: boolean;
  isHalfDay?: boolean;
}

// Рабочий день в минутах (16 часов)
const WORKING_DAY_MINUTES = 960;

// Время наладки в минутах (8 часов)
const SETUP_TIME_MINUTES = 480;

// В Израиле выходные - пятница и суббота
const isWeekendIsrael = (date: Date): boolean => {
  const day = date.getDay();
  return day === 5 || day === 6; // 5 - пятница, 6 - суббота
};

// Массив праздников Израиля на 2025 год (примерные даты)
const HOLIDAYS_2025: HolidayInfo[] = [
  // Формат: начало праздника (вечер), полный день праздника, конец праздника (до 13:00)
  { date: new Date("2025-01-13"), isEve: true, isHalfDay: true },
  { date: new Date("2025-01-14"), isFullDay: true },
  { date: new Date("2025-01-15"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-03-14"), isEve: true, isHalfDay: true },
  { date: new Date("2025-03-15"), isFullDay: true },
  { date: new Date("2025-03-16"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-04-12"), isEve: true, isHalfDay: true },
  { date: new Date("2025-04-13"), isFullDay: true },
  { date: new Date("2025-04-14"), isFullDay: true },
  { date: new Date("2025-04-15"), isFullDay: true },
  { date: new Date("2025-04-16"), isFullDay: true },
  { date: new Date("2025-04-17"), isFullDay: true },
  { date: new Date("2025-04-18"), isFullDay: true },
  { date: new Date("2025-04-19"), isFullDay: true },
  { date: new Date("2025-04-20"), isFullDay: true },
  { date: new Date("2025-04-21"), isEve: true, isHalfDay: true },
  
  // Другие праздники...
  { date: new Date("2025-05-02"), isEve: true, isHalfDay: true },
  { date: new Date("2025-05-03"), isFullDay: true },
  { date: new Date("2025-05-04"), isEve: true, isHalfDay: true }
];

// Проверка, является ли день праздником
const getHolidayStatus = (date: Date): HolidayInfo | null => {
  return HOLIDAYS_2025.find(holiday =>
    holiday.date.getDate() === date.getDate() &&
    holiday.date.getMonth() === date.getMonth() &&
    holiday.date.getFullYear() === date.getFullYear()
  ) || null;
};

// Добавление рабочих дней с учетом выходных
const addWorkingDays = (date: Date, days: number): Date => {
  let result = new Date(date);
  let remainingDays = days;
  
  while (remainingDays > 0) {
    result = addDays(result, 1);
    if (!isWeekendIsrael(result)) {
      const holidayStatus = getHolidayStatus(result);
      if (!holidayStatus || !holidayStatus.isFullDay) {
        remainingDays--;
      }
    }
  }
  
  return result;
};

// Расчет количества рабочих дней для выполнения операции
const calculateRequiredWorkDays = (operationTime: number, quantity: number): number => {
  // Общее время операции в минутах с учетом количества деталей
  const totalOperationTime = operationTime * quantity;
  
  // Добавляем время наладки
  const totalTimeWithSetup = totalOperationTime + SETUP_TIME_MINUTES;
  
  // Расчет количества дней (округляем вверх)
  return Math.ceil(totalTimeWithSetup / WORKING_DAY_MINUTES);
};

// Проверка, может ли станок выполнить данный тип операции
const canMachinePerformOperation = (machine: Machine, operation: Operation): boolean => {
  if (!operation.opAxes) return false;
  
  // Проверка типа операции и возможностей станка
  if (operation.opAxes.includes('4х')) {
    // 4-осевая операция - нужен станок с поддержкой 4 осей
    return machine.types.includes('4х');
  } else {
    // 3-осевая операция - подходит любой станок
    return true;
  }
};

/**
 * Расчет оптимального расписания работы станков на основе заказов
 * @param orders - Список заказов с операциями
 * @param machines - Список доступных станков
 * @param currentDate - Текущая дата для начала расчета
 * @returns Расписание для каждого станка с распределенными операциями
 */
// Модифицированная версия функции calculateSchedule
export const calculateSchedule = (
  orders: Order[], 
  machines: Machine[], 
  currentDate: Date
): MachineSchedule[] => {
  console.log(`Начало расчета расписания на ${format(currentDate, 'yyyy-MM-dd')}`);
  
  // Инициализируем расписание станков
  const schedule: MachineSchedule[] = machines.map(machine => ({
    machineId: machine.id,
    machineName: machine.name,
    releaseDate: new Date(machine.releaseDate),
    operations: []
  }));
  
  // Сортируем заказы по приоритету и дедлайну
  const sortedOrders = [...orders].sort((a, b) => {
    if (a.priority !== b.priority) return b.priority - a.priority;
    const aDeadline = new Date(a.deadline);
    const bDeadline = new Date(b.deadline);
    return aDeadline.getTime() - bDeadline.getTime();
  });
  
  // Для каждого заказа выполняем последовательное планирование операций
  sortedOrders.forEach(order => {
    // Сортируем операции по номеру
    const sortedOperations = [...order.operations].sort((a, b) => a.opNumber - b.opNumber);
    
    // Дата начала следующей операции - инициализируем текущей датой
    let nextOperationStartDate = new Date(currentDate);
    let needsNewDeadline = false;
    
    // Проходим по операциям последовательно
    sortedOperations.forEach(operation => {
      // Находим подходящие станки для операции
      const suitableMachines = machines.filter(machine => 
        canMachinePerformOperation(machine, operation)
      );
      
      if (suitableMachines.length === 0) {
        console.warn(`Нет подходящих станков для операции ${operation.opNumber} заказа ${order.blueprintNumber}`);
        return;
      }
      
      // Находим станок с самой ранней датой освобождения
      let bestMachine: Machine | null = null;
      let bestStartDate = new Date("2099-12-31");
      
      for (const machine of suitableMachines) {
        const machineSchedule = schedule.find(s => s.machineId === machine.id);
        if (!machineSchedule) continue;
        
        // Дата, когда станок будет доступен
        const machineAvailableDate = new Date(machineSchedule.releaseDate);
        
        // Дата начала - макс из даты окончания предыдущей операции и доступности станка
        const potentialStartDate = new Date(
          Math.max(nextOperationStartDate.getTime(), machineAvailableDate.getTime())
        );
        
        if (potentialStartDate < bestStartDate) {
          bestMachine = machine;
          bestStartDate = potentialStartDate;
        }
      }
      
      if (!bestMachine) return;
      
      // Расчет дней выполнения
      const workDays = calculateRequiredWorkDays(operation.opTime, order.quantity);
      const operationEndDate = addWorkingDays(bestStartDate, workDays);
      
      // Проверяем, укладываемся ли в дедлайн
      const deadline = new Date(order.deadline);
      if (operationEndDate > deadline) {
        needsNewDeadline = true;
      }
      
      // Добавляем операцию в расписание
      const machineSchedule = schedule.find(s => s.machineId === bestMachine.id);
      if (machineSchedule) {
        machineSchedule.operations.push({
          ...operation,
          orderId: order.id,
          blueprintNumber: order.blueprintNumber,
          assignedMachine: bestMachine.name,
          machineId: bestMachine.id,
          startDate: bestStartDate,
          endDate: operationEndDate,
          quantity: order.quantity,
          deadline: new Date(order.deadline)
        });
        
        console.log(`Операция #${operation.opNumber} заказа ${order.blueprintNumber} назначена на станок ${bestMachine.name}. Выполнение: ${format(bestStartDate, 'yyyy-MM-dd')} - ${format(operationEndDate, 'yyyy-MM-dd')}`);
        
        // Обновляем дату освобождения станка
        machineSchedule.releaseDate = new Date(operationEndDate);
        
        // Обновляем дату начала следующей операции
        nextOperationStartDate = new Date(operationEndDate);
      }
    });
    
    // Если заказ не укладывается в дедлайн, рассчитываем новый
    if (needsNewDeadline) {
      // Находим последнюю операцию заказа
      const lastOperations = schedule.flatMap(s => s.operations)
        .filter(op => op.orderId === order.id)
        .sort((a, b) => b.opNumber - a.opNumber);
      
      if (lastOperations.length > 0) {
        const lastOperation = lastOperations[0];
        order.newDeadline = format(lastOperation.endDate, 'yyyy-MM-dd');
        console.log(`Заказ ${order.blueprintNumber} не укладывается в срок. Новый дедлайн: ${order.newDeadline}`);
      }
    }
  });
  
  return schedule;
}

// Экспортируем вспомогательные функции для использования в других модулях
export {
  isWeekendIsrael,
  getHolidayStatus,
  addWorkingDays,
  calculateRequiredWorkDays,
  canMachinePerformOperation,
  WORKING_DAY_MINUTES,
  SETUP_TIME_MINUTES
};

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\ui-components\index.ts
export { Button } from './components/Button';
export { Input } from './components/Input';

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\ui-components\components\Button.tsx
import React from 'react';
import classNames from 'classnames';

export interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onClick?: () => void;
  children: React.ReactNode;
  className?: string;
  type?: 'button' | 'submit' | 'reset'; // Добавляем свойство type
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  disabled = false,
  onClick,
  children,
  className,
  type = 'button', // Добавляем значение по умолчанию
}) => {
  const baseStyles = 'rounded font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2';
  const variantStyles = {
    primary: 'bg-indigo-600 hover:bg-indigo-500 text-white focus:ring-indigo-500',
    secondary: 'bg-gray-600 hover:bg-gray-500 text-white focus:ring-gray-500',
    danger: 'bg-red-600 hover:bg-red-500 text-white focus:ring-red-500',
    success: 'bg-green-600 hover:bg-green-500 text-white focus:ring-green-500',
  };
  const sizeStyles = {
    sm: 'py-1 px-2 text-sm',
    md: 'py-2 px-4 text-base',
    lg: 'py-3 px-6 text-lg',
  };

  const classes = classNames(
    baseStyles,
    variantStyles[variant],
    sizeStyles[size],
    { 'opacity-50 cursor-not-allowed': disabled },
    className
  );

  return (
    <button className={classes} onClick={onClick} disabled={disabled} type={type}>
      {children}
    </button>
  );
};

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\ui-components\components\Input.tsx
import React from 'react';
import classNames from 'classnames';

interface InputProps {
  type?: string;
  value: string | number;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
  error?: string;
}

export const Input: React.FC<InputProps> = ({
  type = 'text',
  value,
  onChange,
  placeholder,
  disabled = false,
  className,
  error,
}) => {
  const classes = classNames(
    'w-full p-3 rounded bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500',
    { 'border border-red-500': error },
    className
  );

  return (
    <div>
      <input
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        disabled={disabled}
        className={classes}
      />
      {error && <p className="text-red-500 text-xs mt-1">{error}</p>}
    </div>
  );
};

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\ui-components\styles\components.css
@tailwind base;
@tailwind components;
@tailwind utilities;

.button-loading::after {
  content: '';
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border: 2px solid white;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
  margin-left: 0.5rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
} 


================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\utils\calendarUtils.ts
// src/utils/calendarUtils.ts
import { addDays } from 'date-fns';

// Рабочий день в минутах (16 часов)
export const WORKING_DAY_MINUTES = 960;

// Время наладки в минутах (8 часов)
export const SETUP_TIME_MINUTES = 480;

// Интерфейс для информации о празднике
interface HolidayInfo {
  date: Date;
  isEve?: boolean;
  isFullDay?: boolean;
  isHalfDay?: boolean;
}

// Массив праздников Израиля на 2025 год
export const ISRAEL_HOLIDAYS_2025: HolidayInfo[] = [
  // Формат: начало праздника (вечер), полный день праздника, конец праздника (до 13:00)
  { date: new Date("2025-01-13"), isEve: true, isHalfDay: true },
  { date: new Date("2025-01-14"), isFullDay: true },
  { date: new Date("2025-01-15"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-03-14"), isEve: true, isHalfDay: true },
  { date: new Date("2025-03-15"), isFullDay: true },
  { date: new Date("2025-03-16"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-04-12"), isEve: true, isHalfDay: true },
  { date: new Date("2025-04-13"), isFullDay: true },
  { date: new Date("2025-04-14"), isFullDay: true },
  { date: new Date("2025-04-15"), isFullDay: true },
  { date: new Date("2025-04-16"), isFullDay: true },
  { date: new Date("2025-04-17"), isFullDay: true },
  { date: new Date("2025-04-18"), isFullDay: true },
  { date: new Date("2025-04-19"), isFullDay: true },
  { date: new Date("2025-04-20"), isFullDay: true },
  { date: new Date("2025-04-21"), isEve: true, isHalfDay: true },
  
  // Другие праздники...
  { date: new Date("2025-05-02"), isEve: true, isHalfDay: true },
  { date: new Date("2025-05-03"), isFullDay: true },
  { date: new Date("2025-05-04"), isEve: true, isHalfDay: true }
];

// В Израиле выходные - пятница и суббота
export const isWeekendIsrael = (date: Date): boolean => {
  const day = date.getDay();
  return day === 5 || day === 6; // 5 - пятница, 6 - суббота
};

// Проверка, является ли день праздником
export const getHolidayStatusIsrael = (date: Date): HolidayInfo | null => {
  return ISRAEL_HOLIDAYS_2025.find(holiday =>
    holiday.date.getDate() === date.getDate() &&
    holiday.date.getMonth() === date.getMonth() &&
    holiday.date.getFullYear() === date.getFullYear()
  ) || null;
};

// Получение доступных рабочих часов в день
export const getAvailableHoursInDay = (date: Date): number => {
  // Обычный рабочий день - 16 часов (960 минут)
  const regularWorkingHours = WORKING_DAY_MINUTES / 60;
  
  // Если это выходной, возвращаем 0
  if (isWeekendIsrael(date)) return 0;
  
  // Проверяем, праздник ли это
  const holidayStatus = getHolidayStatusIsrael(date);
  
  if (!holidayStatus) {
    // Обычный рабочий день
    return regularWorkingHours;
  }
  
  if (holidayStatus.isFullDay) {
    // Полный праздничный день - не работаем
    return 0;
  }
  
  if (holidayStatus.isEve && holidayStatus.isHalfDay) {
    // Полдня (до 13:00) - работаем 5 часов
    return 5;
  }
  
  // На всякий случай, если тип праздника не определен
  return 0;
};

// Проверка, является ли день нерабочим
export const isNonWorkingDayIsrael = (date: Date): boolean => {
  if (isWeekendIsrael(date)) return true;
  
  const holidayStatus = getHolidayStatusIsrael(date);
  if (holidayStatus && holidayStatus.isFullDay) return true;
  
  return false;
};

// Добавление рабочих дней с учетом выходных и праздников
export const addWorkingDays = (date: Date, days: number): Date => {
  let result = new Date(date);
  let remainingDays = days;
  
  while (remainingDays > 0) {
    result = addDays(result, 1);
    if (!isNonWorkingDayIsrael(result)) {
      remainingDays--;
    }
  }
  
  return result;
};

// Расчет количества рабочих дней для выполнения операции
export const calculateRequiredWorkDays = (operationTime: number, quantity: number): number => {
  // Общее время операции в минутах с учетом количества деталей
  const totalOperationTime = operationTime * quantity;
  
  // Добавляем время наладки
  const totalTimeWithSetup = totalOperationTime + SETUP_TIME_MINUTES;
  
  // Расчет количества дней (округляем вверх)
  return Math.ceil(totalTimeWithSetup / WORKING_DAY_MINUTES);
};

================================================================================

### Файл: C:\Users\apule\Downloads\333\genesys-app\my-front\src\utils\utils.ts
import { addDays, differenceInDays, format } from 'date-fns';

// Рабочий день в минутах (16 часов)
export const WORKING_DAY_MINUTES = 960;

// Время наладки в минутах (8 часов)
export const SETUP_TIME_MINUTES = 480;

// Массив праздников Израиля на 2025 год
export const ISRAEL_HOLIDAYS_2025 = [
  { date: new Date("2025-01-13"), isEve: true, isHalfDay: true },
  { date: new Date("2025-01-14"), isFullDay: true },
  { date: new Date("2025-01-15"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-03-14"), isEve: true, isHalfDay: true },
  { date: new Date("2025-03-15"), isFullDay: true },
  { date: new Date("2025-03-16"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-04-12"), isEve: true, isHalfDay: true },
  { date: new Date("2025-04-13"), isFullDay: true },
  { date: new Date("2025-04-14"), isFullDay: true },
  { date: new Date("2025-04-15"), isFullDay: true },
  { date: new Date("2025-04-16"), isFullDay: true },
  { date: new Date("2025-04-17"), isFullDay: true },
  { date: new Date("2025-04-18"), isFullDay: true },
  { date: new Date("2025-04-19"), isFullDay: true },
  { date: new Date("2025-04-20"), isFullDay: true },
  { date: new Date("2025-04-21"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-05-02"), isEve: true, isHalfDay: true },
  { date: new Date("2025-05-03"), isFullDay: true },
  { date: new Date("2025-05-04"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-05-22"), isEve: true, isHalfDay: true },
  { date: new Date("2025-05-23"), isFullDay: true },
  { date: new Date("2025-05-24"), isFullDay: true },
  { date: new Date("2025-05-25"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-08-04"), isEve: true, isHalfDay: true },
  { date: new Date("2025-08-05"), isFullDay: true },
  { date: new Date("2025-08-06"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-09-24"), isEve: true, isHalfDay: true },
  { date: new Date("2025-09-25"), isFullDay: true },
  { date: new Date("2025-09-26"), isFullDay: true },
  { date: new Date("2025-09-27"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-10-03"), isEve: true, isHalfDay: true },
  { date: new Date("2025-10-04"), isFullDay: true },
  { date: new Date("2025-10-05"), isEve: true, isHalfDay: true },
  
  { date: new Date("2025-10-08"), isEve: true, isHalfDay: true },
  { date: new Date("2025-10-09"), isFullDay: true },
  { date: new Date("2025-10-10"), isFullDay: true },
  { date: new Date("2025-10-11"), isFullDay: true },
  { date: new Date("2025-10-12"), isFullDay: true },
  { date: new Date("2025-10-13"), isFullDay: true },
  { date: new Date("2025-10-14"), isFullDay: true },
  { date: new Date("2025-10-15"), isFullDay: true },
  { date: new Date("2025-10-16"), isFullDay: true },
  { date: new Date("2025-10-17"), isFullDay: true },
  { date: new Date("2025-10-18"), isEve: true, isHalfDay: true }
];

// В Израиле выходные дни - пятница и суббота
export const isWeekendIsrael = (date: Date): boolean => {
  const day = date.getDay();
  return day === 5 || day === 6; // 5 - пятница, 6 - суббота
};

// Проверка, является ли день праздником в Израиле
export const getHolidayStatusIsrael = (date: Date) => {
  return ISRAEL_HOLIDAYS_2025.find(holiday => 
    holiday.date.getDate() === date.getDate() && 
    holiday.date.getMonth() === date.getMonth() && 
    holiday.date.getFullYear() === date.getFullYear()
  ) || null;
};

// Проверка, является ли день нерабочим в Израиле (выходной или полный праздник)
export const isNonWorkingDayIsrael = (date: Date): boolean => {
  if (isWeekendIsrael(date)) return true;
  
  const holidayStatus = getHolidayStatusIsrael(date);
  if (holidayStatus && holidayStatus.isFullDay) return true;
  
  return false;
};

// Получение доступных рабочих часов в день
export const getAvailableHoursInDay = (date: Date): number => {
  // Обычный рабочий день - 16 часов (960 минут)
  const regularWorkingHours = WORKING_DAY_MINUTES / 60;
  
  // Если это выходной, возвращаем 0
  if (isWeekendIsrael(date)) return 0;
  
  // Проверяем, праздник ли это
  const holidayStatus = getHolidayStatusIsrael(date);
  
  if (!holidayStatus) {
    // Обычный рабочий день
    return regularWorkingHours;
  }
  
  if (holidayStatus.isFullDay) {
    // Полный праздничный день - не работаем
    return 0;
  }
  
  if (holidayStatus.isEve && holidayStatus.isHalfDay) {
    // Полдня (до 13:00) - работаем 5 часов
    return 5;
  }
  
  // На всякий случай, если тип праздника не определен
  return 0;
};

// Добавление рабочих дней с учетом израильского календаря
export const addWorkingDays = (date: Date, days: number): Date => {
  let result = new Date(date);
  let remainingDays = days;
  
  while (remainingDays > 0) {
    result = addDays(result, 1);
    if (!isNonWorkingDayIsrael(result)) {
      remainingDays--;
    }
  }
  
  return result;
};

// Расчет количества рабочих дней между датами с учетом израильского календаря
export const calculateWorkingDays = (startDate: Date, endDate: Date): number => {
  if (startDate > endDate) return 0;
  
  let workingDays = 0;
  let currentDate = new Date(startDate);
  
  while (currentDate <= endDate) {
    if (!isNonWorkingDayIsrael(currentDate)) {
      workingDays++;
    }
    currentDate = addDays(currentDate, 1);
  }
  
  return workingDays;
};

// Расчет количества дней для выполнения операции
export const calculateRequiredWorkDays = (operationTime: number, quantity: number): number => {
  // Общее время операции в минутах с учетом количества деталей
  const totalOperationTime = operationTime * quantity;
  
  // Добавляем время наладки
  const totalTimeWithSetup = totalOperationTime + SETUP_TIME_MINUTES;
  
  // Расчет количества дней (округляем вверх)
  return Math.ceil(totalTimeWithSetup / WORKING_DAY_MINUTES);
};

// Функция для фильтрации заказов по поисковому запросу и статусу
export const filterOrders = <T extends { blueprintNumber: string; status: string }>(
  orders: T[],
  searchTerm: string,
  statusFilter: string
): T[] => {
  let result = [...orders];
  if (searchTerm) {
    result = result.filter(order =>
      order.blueprintNumber.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }
  if (statusFilter !== 'all') {
    result = result.filter(order => order.status === statusFilter);
  }
  return result;
};

// Сортировка заказов по приоритету и дедлайну
export const sortOrdersByPriorityAndDeadline = <T extends { priority: number; deadline: string | Date }>(
  orders: T[],
  today: Date = new Date()
): T[] => {
  return [...orders].sort((a, b) => {
    // Сначала сортируем по приоритету (больший приоритет первый)
    if (a.priority !== b.priority) {
      return b.priority - a.priority;
    }
    
    // Затем сортируем по дедлайну (ближайший дедлайн первый)
    const aDeadline = new Date(a.deadline);
    const bDeadline = new Date(b.deadline);
    
    // Проверяем, просрочен ли заказ
    const aOverdue = aDeadline < today;
    const bOverdue = bDeadline < today;
    
    // Просроченные заказы идут первыми
    if (aOverdue !== bOverdue) return aOverdue ? -1 : 1;
    
    // Для непросроченных заказов - сортировка по близости к дедлайну
    return aDeadline.getTime() - bDeadline.getTime();
  });
};

// Функция для общей обработки ошибок
export const handleError = (message: string, error: unknown): void => {
  console.error(message, error);
};

// Форматирование даты для отображения
export const formatDateDisplay = (dateStr?: string, defaultValue: string = 'Не указано'): string => {
  if (!dateStr) return defaultValue;
  try {
    return format(new Date(dateStr), 'dd.MM.yyyy');
  } catch (e) {
    return defaultValue;
  }
};

// Подсчет рабочего времени выполнения операции с учетом количества деталей
export const calculateOperationWorkTime = (
  opTimePerUnit: number, // Время в минутах на единицу
  quantity: number
): { hours: number, minutes: number } => {
  const totalMinutes = opTimePerUnit * quantity;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = Math.round(totalMinutes % 60);
  
  return { hours, minutes };
};

// Проверка, соответствует ли производственный график дедлайну заказа
export const willMeetDeadline = (
  lastOperationEndDate: Date, 
  orderDeadline: Date
): { willMeet: boolean, marginDays: number } => {
  const diffDays = differenceInDays(orderDeadline, lastOperationEndDate);
  return {
    willMeet: diffDays >= 0,
    marginDays: diffDays
  };
};

// Расчет времени выполнения заказа на основе операций и количества деталей
export const calculateOrderExecutionTime = (operations: any[], quantity: number) => {
  // Сначала сортируем операции по номеру
  const sortedOps = [...operations].sort((a, b) => a.opNumber - b.opNumber);
  
  let totalTime = 0;
  let totalDays = 0;
  
  // Для каждой операции рассчитываем время и дни
  sortedOps.forEach(op => {
    const opTime = op.opTime * quantity; // Время операции в минутах
    const setupTime = SETUP_TIME_MINUTES; // Время наладки
    const totalOpTime = opTime + setupTime;
    
    totalTime += totalOpTime;
    totalDays += Math.ceil(totalOpTime / WORKING_DAY_MINUTES);
  });
  
  return {
    totalMinutes: totalTime,
    totalDays: totalDays
  };
};

================================================================================

